#
# These commands rebuild the sample configuration documents for simple-metadata-server, active-metadata-server,
# view-server, engine-host and integration-daemon.  They use IntelliJ's HTTP Client.
#
@baseURL=https://localhost:9443
@adminUserId=garygeeke
@auditLogTopic=logging

# ---------------------------------------------
# Metadata Access Store: simple-metadata-store
#
###
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/simple-metadata-store/server-user-id?id=simplenpa

###
# Set up the description of this server.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/simple-metadata-store/server-description
Content-Type: text/plain

A metadata store that supports Open Metadata Access Services (OMASs) without event notifications.

###
# Set up the local repository to use the in-memory implementation.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/simple-metadata-store/local-repository/mode/in-memory-repository

###
# Set up all of the registered, undeprecated Open Metadata Access Services (OMASs) with the topics disabled so Apache Kafka is not required.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/simple-metadata-store/access-services/no-topics

###
# Add the file name for an open Metadata Archive that should be loaded each time the server starts.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/simple-metadata-store/open-metadata-archives/file
Content-Type: text/plain

content-packs/SimpleCatalog.omarchive

###
# ---------------------------------------------
# Metadata Access Store: active-metadata-store
#
###
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/active-metadata-store/server-user-id?id=activenpa

###
# Set up the description of this server.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/active-metadata-store/server-description
Content-Type: text/plain

A metadata store that supports Open Metadata Access Services (OMASs) with event notifications.  It provides metadata to view-server, engine-host and integration-daemon.

###
# Set up the local repository to use the XTDB KV implementation.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/active-metadata-store/local-repository/mode/xtdb-local-kv-repository

###

@activeMetadataStoreMetadataCollectionId=61400a70-8c49-4635-b221-a8b11872ae16

###
# group: Configuring OMAG Servers / Configuration for Cohort Members / Configuration for Metadata Access Points / Configuration for Metadata Servers
# @name Set local metadata collection id
# Set up a human friendly name for the collection of metadata that originates from this metadata server. This name is used in events and messages to help people diagnose problems in the cohort.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/active-metadata-store/local-repository/metadata-collection-id
Content-Type: text/plain

{{activeMetadataStoreMetadataCollectionId}}


###
# Set up the common properties needed to call your event bus.  The value of ~{kafkaEndpoint}~ is resolved in the
# application.properties file using the `platform.placeholder.variables` property.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/active-metadata-store/event-bus
Content-Type: application/json

{
"producer":
{
"bootstrap.servers":"~{kafkaEndpoint}~"
},
"consumer":
{
"bootstrap.servers":"~{kafkaEndpoint}~"
}
}


###
# Set up all of the registered, undeprecated Open Metadata Access Services (OMASs) with kafka notifications enabled.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/active-metadata-store/access-services
Content-Type: application/json

{
  "KarmaPointIncrement" : "1"
}

###
# Add the file name for an open Metadata Archive that should be loaded each time the server starts.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/active-metadata-store/open-metadata-archives/file
Content-Type: text/plain

content-packs/CoreContentPack.omarchive


###
# -------------------------
# View Server: view-server
#
###
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/view-server/server-user-id?id=viewnpa

###
# Set up the description of this server.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/view-server/server-description
Content-Type: text/plain

A server that supplies REST API endpoints for User Interfaces and non-Java environments such as Python.

###
# Set up all of the registered, undeprecated Open Metadata View Services (OMVSs).  The request body lists the platforms
# and servers that will appear on the appropriate UI dropdowns.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/view-server/view-services
Content-Type: application/json

{
  "class": "ViewServiceRequestBody",
  "omagserverName": "active-metadata-store",
  "omagserverPlatformRootURL": "~{egeriaEndpoint}~"
}

###
# -------------------------
# Engine Host: engine-host
#
###
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/engine-host/server-user-id?id=enginenpa

###
# Set up the description of this server.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/engine-host/server-description
Content-Type: text/plain

A server that runs governance service requests, triggered by engine actions created in active-metadata-store.

###
# Set up the address of the active-metadata-store that will supply the engine host with metadata along with the
# qualified names of the governance engines it will run.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/engine-host/engine-host-services
Content-Type: application/json

{
  "class": "EngineHostServicesConfig",
  "engineList": [
    {
      "class": "EngineConfig",
      "engineId": "6a86651a-c9c1-4aee-8a83-4c028d89f775",
      "engineQualifiedName": "AssetOnboarding",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "947248ee-a6eb-4f99-8376-7ff488b6281e",
      "engineQualifiedName": "Stewardship",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "d91b91c2-e019-4eca-870d-d88f7caae696",
      "engineQualifiedName": "FileSurveys",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "8be68bbe-54ac-4358-aeb9-90782d4e544c",
      "engineQualifiedName": "FileGovernanceServices",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "f71a3abb-6d61-4338-8caf-6124a07e35d2",
      "engineQualifiedName": "UnityCatalogSurveys",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "d4d86ff2-0654-4616-a5f2-3c15c07865b6",
      "engineQualifiedName": "UnityCatalogGovernanceServices",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "c0cf5da9-7725-4bdc-ae6e-6f69b4ce3ba2",
      "engineQualifiedName": "PostgreSQLSurveys",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "4a8f28dc-5257-49e3-bfab-6605d83537dd",
      "engineQualifiedName": "PostgreSQLGovernanceServices",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "9b7a1da6-7882-41c7-b838-0e297787972f",
      "engineQualifiedName": "ApacheAtlasSurveys",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "f5c3b142-0e10-44ae-a160-a1e4d2f32e13",
      "engineQualifiedName": "ApacheAtlasGovernanceServices",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "6e04ff1b-1ba3-4eaf-a821-0d52951cc3c4",
      "engineQualifiedName": "EgeriaSurveys",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "d1d36d25-1176-4cd7-a46c-4dcc62990047",
      "engineQualifiedName": "EgeriaGovernanceServices",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "5f30c642-ceb4-4374-901f-1990572aa109",
      "engineQualifiedName": "ApacheKafkaSurveys",
      "engineUserId": "generalnpa"
    },
    {
      "class": "EngineConfig",
      "engineId": "e107c6ea-7fbe-407b-b51f-e35a488ef49d",
      "engineQualifiedName": "ApacheKafkaGovernanceServices",
      "engineUserId": "generalnpa"
    }
  ],
  "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
  "omagserverName": "active-metadata-store"
}

###
# ---------------------------------------
# Integration Daemon: integration-daemon
#
###
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/integration-daemon/server-user-id?id=daemonnpa

###
# Set up the description of this server.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/integration-daemon/server-description
Content-Type: text/plain

A server that runs integration connectors that synchronize and exchange metadata with different types of technologies and tools.

###
# Set up the qualified name of the integration group that this server supports and the location of the
# metadata access store active-metadata-store
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/integration-daemon/integration-groups/configuration/all
Content-Type: application/json

[
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "active-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:Default"
    },
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "active-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:ApacheAtlas"
    },
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "active-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:ApacheKafka"
    },
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "active-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:OpenAPIs"
    },
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "active-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:OpenMetadataObservability"
    },
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "active-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:PostgreSQL"
    },
    {
        "class": "IntegrationGroupConfig",
        "omagserverPlatformRootURL": "~{egeriaEndpoint}~",
        "omagserverName" : "active-metadata-store",
        "integrationGroupQualifiedName" : "Egeria:IntegrationGroup:UnityCatalog"
    }
]

###