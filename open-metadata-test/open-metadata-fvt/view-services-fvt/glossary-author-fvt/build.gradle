/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */

plugins {
    // Include plug-in for starting a new process
    id 'com.github.psxpaul.execfork'
    id 'java'
}

apply plugin: "com.github.psxpaul.execfork"
apply plugin: 'groovy'

dependencies {
    implementation 'org.slf4j:slf4j-api'
    implementation project(':open-metadata-implementation:view-services:glossary-author-view:glossary-author-view-server')
    implementation project(':open-metadata-implementation:frameworks:open-connector-framework')
    implementation project(':open-metadata-implementation:view-services:glossary-author-view:glossary-author-view-server')
    implementation project(':open-metadata-implementation:access-services:subject-area:subject-area-api')
    implementation project(':open-metadata-implementation:access-services:subject-area:subject-area-client')
    implementation project(':open-metadata-implementation:repository-services:repository-services-apis')
    implementation project(':open-metadata-implementation:common-services:ffdc-services')
    implementation project(':open-metadata-implementation:admin-services:admin-services-api')            //':org.odpi.openmetadata.adminservices.configuration.properties')

    testImplementation project(':open-metadata-distribution:open-metadata-assemblies')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation localGroovy()
    compileOnly 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'org.springframework:spring-core'
    implementation 'org.springframework:spring-web'


    testImplementation("org.junit.jupiter:junit-jupiter-params")
    implementation project(':open-metadata-implementation:adapters:authentication-plugins:http-helper')
    testImplementation 'org.apache.commons:commons-lang3'
    testImplementation project(':open-metadata-test:open-metadata-fvt:fvt-utilities')
}

description = 'Glossary Author OMVS FVT'

java {
    withJavadocJar()
}

// Local properties to use
ext
        {
            distdir="../../../../../../open-metadata-distribution/open-metadata-assemblies/build/unpacked/egeria-${project.version}-distribution.tar.gz"
           // distdir= "../../../../open-metadata-distribution/open-metadata-assemblies/build/unpacked/egeria-${project.version}-distribution.tar.gz"
            keydir="../../../../../open-metadata-implementation/server-chassis/server-chassis-spring/src/main/resources"
            gaport="10454"
        }


// Build the groovy test script
sourceSets.test.java.srcDirs = []
sourceSets.test.groovy.srcDirs = ["src/test/java", "src/test/script"]

// Initially we launch as an app -- though there may be a better way of running this in the existing jvm
task startServer(dependsOn: ['cleanData',':open-metadata-distribution:open-metadata-assemblies:unzip','prepareDirs'], type: com.github.psxpaul.task.ExecFork) {
    // Start some external service
    executable = System.properties.'java.home' + '/bin/java'
    workingDir = layout.buildDirectory.dir('run')

    // the keystore is needed as for the FVT the flossary author view is a client for the subject ares service
    //remove the two -Dlogging args if you dont want debug level of logging
    args = [ "-Dserver.port=${gaport}",
             "-Dloader.path=${distdir}/server/lib",
             "-Dspringdoc.api-docs.enabled=false",
             "-Djavax.net.ssl.trustStore=${distdir}/truststore.p12",
             "-Djavax.net.ssl.trustStorePassword=egeria",
             "-Djavax.net.ssl.keyStore=${distdir}/keystore.p12",
             "-Djavax.net.ssl.keyStorePassword=egeria",
             "-Dserver.ssl.trust-store=${distdir}/truststore.p12",
             "-Dserver.ssl.trust-store-password=egeria",
//             "-Dserver.ssl.key-store=${keydir}/keystore.p12",
//             "-Dserver.ssl.key-store-password=egeria",
//             "-Djavax.net.debug=ssl:handshake:verbose:keymanager:trustmanager", //Troubleshooting removeLater
//            "-Dlogging.level.org.apache.tomcat=DEBUG" ,
//             "-Dlogging.level.org.apache.catalina=DEBUG",
//             "-Dlogging.level.org.odpi.openmetadata.viewservices.glossaryauthor.server=DEBUG",
//added for IDE Debug, to debug server code
/*            "-Xdebug",
            "-Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=n",*/
//End debug options
             "-jar",
             "${distdir}/server/server-chassis-spring-${project.version}.jar" ]
    // Setting the output directories to be the same for ALL FVTs acts as a synchronization mechanism
    // - alternatively we need to ensure the server port is unique per test
    standardOutput = layout.buildDirectory.file("chassis.log")
    errorOutput = layout.buildDirectory.file("chassis-error.log")
    stopAfter = test
    waitForPort = Integer.valueOf(gaport)
    timeout = 180
    //waitForOutput = 'has started'
}

// Configuration of the platform

task configServer(dependsOn: ['startServer','classes'], type: JavaExec) {
    mainClass = 'configureStartServer'
    classpath = sourceSets.test.runtimeClasspath
    //TODO: These parms aren't currently correctly passed. We rely on defaults in the script
    systemProperties = [
            'name': 'Egeria chassis',
            'baseURL': 'https://localhost:' + gaport,
            'servermem': 'serverinmem',
            'serverview': 'serverview',
            'delay': '2',
            'user': 'garygeeke'
    ]
}

task prepareDirs {
    mustRunAfter clean
    doLast {
        mkdir layout.buildDirectory.dir('run')
    }
}

task cleanData(type: Delete) {
    delete files("${buildDir}/run/data")
}

// The actual tests (Integration only)
test {
    description 'Run Integration Tests'
//    test.debug = true // -- to debug in IDE
    group = 'verification'
    outputs.upToDateWhen {return false}
    systemProperties = [
            'fvt.url': 'https://localhost:'+ gaport,
//            'javax.net.debug':'ssl:handshake:verbose:keymanager:trustmanager'
//            'logging.level.org.springframework.web.client.RestTemplate':'DEBUG'
    ]
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    dependsOn configServer
    
}

// Resolves logging conflict with Jena
loggingCapabilities {
    enforceLogback()// Configuration goes here
}