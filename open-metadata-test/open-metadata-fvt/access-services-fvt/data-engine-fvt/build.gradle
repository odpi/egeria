/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */
plugins {
    // Include plug-in for starting a new process
    id 'com.github.psxpaul.execfork'
    id 'java'
}

apply plugin: "com.github.psxpaul.execfork"
apply plugin: 'groovy'

dependencies {
    implementation project (":open-metadata-implementation:access-services:data-engine:data-engine-api")
    implementation project (":open-metadata-implementation:frameworks:open-connector-framework")
    implementation project(':open-metadata-implementation:frameworks:audit-log-framework')
    implementation project (":open-metadata-implementation:access-services:data-engine:data-engine-client")
    implementation project (":open-metadata-implementation:repository-services:repository-services-apis")
    implementation project (":open-metadata-implementation:repository-services:repository-services-client")
    implementation project(':open-metadata-implementation:admin-services:admin-services-api')
    implementation project(':open-metadata-implementation:common-services:ffdc-services')
    implementation project(':open-metadata-implementation:common-services:ocf-metadata-management:ocf-metadata-client')
    implementation project(':open-metadata-test:open-metadata-fvt:fvt-utilities')
    implementation project(':open-metadata-implementation:common-services:ffdc-services')
    testImplementation project (":open-metadata-distribution:open-metadata-assemblies")
    testCompileOnly 'com.fasterxml.jackson.core:jackson-annotations'
    testImplementation ("org.junit.jupiter:junit-jupiter-api")
    testImplementation ("org.junit.jupiter:junit-jupiter-params")
    implementation project(':open-metadata-implementation:adapters:authentication-plugins:http-helper')
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation localGroovy()
    testImplementation 'org.apache.commons:commons-lang3'

}

description = 'Data Engine OMAS FVT'

java {
    withJavadocJar()
}

def applicationProperties = new Properties()
file("src/test/resources/application.properties").withInputStream { applicationProperties.load(it) }
def baseURL = applicationProperties.getProperty('base.url') + ":" + applicationProperties.getProperty('server.port')
def serverInMemory = applicationProperties.getProperty('server.in-memory-graph.name')
def delay = applicationProperties.getProperty('delay')
def user = applicationProperties.getProperty('user')
def port = applicationProperties.getProperty('server.port')

// Local properties to use
ext
        {
            distdir="../../../../../../open-metadata-distribution/open-metadata-assemblies/build/unpacked/egeria-${project.version}-distribution.tar.gz"
        }


// Build the groovy test script
sourceSets.test.java.srcDirs = []
sourceSets.test.groovy.srcDirs = ["src/test/java", "src/test/script"]

// Initially we launch as an app -- though there may be a better way of running this in the existing jvm

task startServer(dependsOn: ['cleanData',':open-metadata-distribution:open-metadata-assemblies:unzip','prepareDirs'], type: com.github.psxpaul.task.ExecFork) {
    // Start some external service
    executable = System.properties.'java.home' + '/bin/java'
    workingDir = layout.buildDirectory.dir('run')

    args = [ "-Dserver.port=" + port,
             "-Dloader.path=${distdir}/server/lib",
             "-Dspringdoc.api-docs.enabled=false",
             "-Djavax.net.ssl.trustStore=${distdir}/truststore.p12",
             "-Dserver.ssl.trust-store=${distdir}/truststore.p12",
             "-jar",
             "${distdir}/server/server-chassis-spring-${project.version}.jar" ]
    // Setting the output directories to be the same for ALL FVTs acts as a synchronization mechanism
    // - alternatively we need to ensure the server port is unique per test
    standardOutput = layout.buildDirectory.file("chassis.log")
    errorOutput = layout.buildDirectory.file("chassis-error.log")
    stopAfter = test
    waitForPort = Integer.parseInt(port)
    timeout = 180

    //waitForOutput = 'has started'
}


// Configuration of the platform

task configServer(dependsOn: ['startServer','classes'], type: JavaExec) {
    mainClass = 'configureStartServer'
    classpath = sourceSets.test.runtimeClasspath

    systemProperties = [
            'name': 'Egeria chassis',
            'baseURL': baseURL,
            'servermem': serverInMemory,
            'delay': delay,
            'user': user,
            'connectorTypeArchive': 'src/test/resources/DataStoreConnectorTypes.json'
    ]
}


task prepareDirs {
    mustRunAfter clean
    doLast {
        mkdir layout.buildDirectory.dir('run')
    }
}

task cleanData(type: Delete) {
    delete files("${buildDir}/run/data")
}

// The actual tests (Integration only)

test {
    description 'Run Integration Tests'
    group = 'verification'
    outputs.upToDateWhen {return false}
    systemProperties = [
            'fvt.url': baseURL
    ]
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    dependsOn configServer

}

// Resolves logging conflict with Jena
loggingCapabilities {
    enforceLogback()// Configuration goes here
}