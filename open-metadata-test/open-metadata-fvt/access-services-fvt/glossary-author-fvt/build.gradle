/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */

plugins {
    // Include plug-in for starting a new process
    id 'com.github.psxpaul.execfork'
    id 'java'
}

apply plugin: "com.github.psxpaul.execfork"
apply plugin: 'groovy'

dependencies {
    implementation 'org.slf4j:slf4j-api'
    implementation project(':open-metadata-implementation:view-services:glossary-author-view:glossary-author-view-server')
    implementation project(':open-metadata-implementation:frameworks:open-connector-framework')
    implementation project(':open-metadata-implementation:view-services:glossary-author-view:glossary-author-view-server')
    implementation project(':open-metadata-implementation:access-services:subject-area:subject-area-api')
    implementation project(':open-metadata-implementation:access-services:subject-area:subject-area-client')
    implementation project(':open-metadata-implementation:repository-services:repository-services-apis')
    implementation project(':open-metadata-implementation:common-services:ffdc-services')

    testImplementation project(':open-metadata-distribution:open-metadata-assemblies')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation localGroovy()
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'org.springframework:spring-core'
    implementation 'org.springframework:spring-web'


    testImplementation("org.junit.jupiter:junit-jupiter-params")
    implementation project(':open-metadata-implementation:adapters:authentication-plugins:http-helper')
    testImplementation 'org.apache.commons:commons-lang3'
    testImplementation project(':open-metadata-test:open-metadata-fvt:fvt-utilities')
}

description = 'Glossary Author OMVS FVT'

java {
    withJavadocJar()
}

// Local properties to use
ext
        {
            distdir="../../../../../open-metadata-distribution/open-metadata-assemblies/build/unpacked/egeria-${project.version}-distribution.tar.gz"
            gaport="10454"
        }


// Build the groovy test script
sourceSets.test.java.srcDirs = []
sourceSets.test.groovy.srcDirs = ["src/test/java", "src/test/script"]

// Initially we launch as an app -- though there may be a better way of running this in the existing jvm
task startServer(dependsOn: ['cleanData',':open-metadata-distribution:open-metadata-assemblies:unzip'], type: com.github.psxpaul.task.ExecFork) {
    // Start some external service
    executable = System.properties.'java.home' + '/bin/java'
    workingDir = "${buildDir}"
    args = [ "-Dserver.port=${gaport}",
             "-Dloader.path=${distdir}/server/lib",
             "-Dspringdoc.api-docs.enabled=false",
             "-Djavax.net.ssl.trustStore=${distdir}/truststore.p12",
             "-Dserver.ssl.trust-store=${distdir}/truststore.p12",
             "-jar",
             "${distdir}/server/server-chassis-spring-${project.version}.jar" ]
    // Setting the output directories to be the same for ALL FVTs acts as a synchronization mechanism
    // - alternatively we need to ensure the server port is unique per test
    standardOutput = "${buildDir}/chassis.log"
    errorOutput = "${buildDir}/chassis-error.log"
    //stopAfter = verify
    waitForPort = Integer.valueOf(gaport)
    timeout = 180
    //waitForOutput = 'has started'
}

// Configuration of the platform

task configServer(dependsOn: ['startServer','classes'], type: JavaExec) {
    main = 'configureStartServer'
    classpath = sourceSets.test.runtimeClasspath
    //TODO: These parms aren't currently correctly passed. We rely on defaults in the script
    systemProperties = [
            'name': 'Egeria chassis',
            'baseURL': 'https://localhost:' + gaport,
            'servermem': 'serverinmem',
            'serverview': 'serverview',
            'delay': '10',
            'user': 'garygeeke'
    ]
}

task cleanData(type: Delete) {
    delete files("${buildDir}/data")
}

// The actual tests (Integration only)
test {
    description 'Run Integration Tests'
    group = 'verification'
    outputs.upToDateWhen {return false}
    systemProperties = [
            'fvt.url': 'https://localhost:'+ gaport
    ]
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    dependsOn configServer
    finalizedBy stopServer
}
