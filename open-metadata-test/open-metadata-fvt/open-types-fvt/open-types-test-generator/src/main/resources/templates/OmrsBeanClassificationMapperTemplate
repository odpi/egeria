/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright Contributors to the ODPi Egeria project. */

// This is a generated file - do not edit - changes should be made to the templates amd/or generator to generate this file with changes.

package org.odpi.openmetadata.fvt.opentypes.classifications.<$$uClassificationName$$>;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.*;

// omrs
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.*;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.*;
import org.odpi.openmetadata.opentypes.OpenMetadataTypesArchiveAccessor;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification;
import org.odpi.openmetadata.fvt.opentypes.common.*;
import org.odpi.openmetadata.fvt.opentypes.enums.*;

/**
 * Static mapping methods to map between <$$uClassificationName$$> and the omrs equivalents.
 */
public class <$$uClassificationName$$>Mapper {
    private static final Logger log = LoggerFactory.getLogger( <$$uClassificationName$$>Mapper.class);
    private static final String className = <$$uClassificationName$$>Mapper.class.getName();
   /**
    * @param omrsClassification - the supplied omrs classification
    * @return equivalent <$$uClassificationName$$>
    */
   static public <$$uClassificationName$$> mapOmrsToBean(Classification omrsClassification){
        String classificationTypeName = omrsClassification.getName();
        if ("<$$uClassificationName$$>".equals(classificationTypeName)) {
                <$$uClassificationName$$> <$$ClassificationName$$> = new <$$uClassificationName$$>();
                //set core attributes
                SystemAttributes systemAttributes = new SystemAttributes();

                systemAttributes.setStatus(omrsClassification.getStatus());
                systemAttributes.setCreatedBy(omrsClassification.getCreatedBy());
                systemAttributes.setUpdatedBy(omrsClassification.getUpdatedBy());
                systemAttributes.setCreateTime(omrsClassification.getCreateTime());
                systemAttributes.setUpdateTime(omrsClassification.getUpdateTime());
                systemAttributes.setVersion(omrsClassification.getVersion());
                <$$ClassificationName$$>.setSystemAttributes(systemAttributes);


                // Set properties
                InstanceProperties omrsClassificationProperties = omrsClassification.getProperties();
                if (omrsClassificationProperties !=null) {
                  omrsClassificationProperties.setEffectiveFromTime(<$$ClassificationName$$>.getEffectiveFromTime());
                  omrsClassificationProperties.setEffectiveToTime(<$$ClassificationName$$>.getEffectiveToTime());
                  Iterator omrsPropertyIterator = omrsClassificationProperties.getPropertyNames();
                  while (omrsPropertyIterator.hasNext()) {
                    String name = (String) omrsPropertyIterator.next();
                    //TODO check if this is a property we expect or whether the type has been added to.
                    // this is a property we expect
                    InstancePropertyValue value = omrsClassificationProperties.getPropertyValue(name);

                    // supplied guid matches the expected type

                    Object actualValue;
                    switch (value.getInstancePropertyCategory()) {
                        case PRIMITIVE:
                            PrimitivePropertyValue primitiveTypePropertyValue = (PrimitivePropertyValue) value;
                            actualValue = primitiveTypePropertyValue.getPrimitiveValue();
                            if (<$$uClassificationName$$>.getAttributePropertyNames().contains(name)) {
                               <$$Attr$$
                               if (name.equals("<$$AttrName$$>")) {
                                  <$$ClassificationName$$>.set<$$uAttrName$$>((<$$AttrType$$>)actualValue);
                               }
                               $$Attr$$>

                            } else {
                                // put out the omrs value object
                                if (null==<$$ClassificationName$$>.getExtraAttributes())  {
                                     <$$ClassificationName$$>.setExtraAttributes(new HashMap<String, Object>());
                                }
                               <$$ClassificationName$$>.getExtraAttributes().put(name, primitiveTypePropertyValue);
                            }
                            break;
                        case ENUM:
                            EnumPropertyValue enumTypePropertyValue = (EnumPropertyValue) value;
                            String symbolicName = enumTypePropertyValue.getSymbolicName();
                            if (<$$uClassificationName$$>.getEnumPropertyNames().contains(name)) {
                                <$$Enum$$
                                 if (name.equals("<$$EnumName$$>")) {
                                       <$$uEnumType$$> <$$EnumName$$> = <$$uEnumType$$>.valueOf(symbolicName);
                                      <$$ClassificationName$$>.set<$$uEnumName$$>(<$$EnumName$$>);
                                 }
                                $$Enum$$>

                            } else {
                                // put out the omrs value object
                                if (null==<$$ClassificationName$$>.getExtraAttributes())  {
                                     <$$ClassificationName$$>.setExtraAttributes(new HashMap<String, Object>());
                                }
                                 <$$ClassificationName$$>.getExtraAttributes().put(name, enumTypePropertyValue);
                             }

                            break;
                        case MAP:
                            if (<$$uClassificationName$$>.getMapPropertyNames().contains(name)) {
                                 MapPropertyValue mapTypePropertyValue = (MapPropertyValue) value;
                                 InstanceProperties instancePropertyForMap = (InstanceProperties) mapTypePropertyValue.getMapValues();

                                 <$$Map$$
                                 if (name.equals("<$$MapName$$>")) {

                                       // Only support Map<String,String> as that is what is in the archive types at this time.
                                       Map<String, String> actualMap = new HashMap<>();
                                       Iterator iter = instancePropertyForMap.getPropertyNames();
                                       while (iter.hasNext()) {
                                           String mapkey = (String) iter.next();
                                           PrimitivePropertyValue primitivePropertyMapValue = (PrimitivePropertyValue) instancePropertyForMap.getPropertyValue(mapkey);
                                           String mapvalue = (String) primitivePropertyMapValue.getPrimitiveValue();
                                           actualMap.put(mapkey, mapvalue);
                                       }
                                       <$$ClassificationName$$>.set<$$uMapName$$>(actualMap);
                                 }
                                 $$Map$$>

                               }
                               break;
                        case ARRAY:
                        case STRUCT:
                        case UNKNOWN:
                            // error
                            break;
                    }

                  }   // end while
                }
                return <$$ClassificationName$$>;
            } else {
                // TODO wrong type
            }
            return null;
    }
    /**
     * Map (convert) the supplied <$$uClassificationName$$> to an omrs Classification.
     * @param  <$$ClassificationName$$>  supplied <$$uClassificationName$$>
     * @return  classificationDetail equivalent to <$$ClassificationName$$>
     */
    static public Classification mapBeanToOmrs(<$$uClassificationName$$> <$$ClassificationName$$>) {
            Classification omrsClassification = new Classification();
            SystemAttributes systemAttributes = <$$ClassificationName$$>.getSystemAttributes();
            if (systemAttributes!=null) {
                   if (systemAttributes.getCreatedBy()!=null)
                        omrsClassification.setCreatedBy(systemAttributes.getCreatedBy());
                   if (systemAttributes.getUpdatedBy()!=null)
                        omrsClassification.setUpdatedBy(systemAttributes.getUpdatedBy());
                   if (systemAttributes.getCreateTime()!=null)
                        omrsClassification.setCreateTime(systemAttributes.getCreateTime());
                   if (systemAttributes.getUpdateTime()!=null)
                        omrsClassification.setUpdateTime(systemAttributes.getUpdateTime());
                   if (systemAttributes.getVersion()!=null)
                        omrsClassification.setVersion(systemAttributes.getVersion());
                   if (systemAttributes.getStatus()!=null) {
                        omrsClassification.setStatus(systemAttributes.getStatus());
                   }
            }

            InstanceProperties instanceProperties = new InstanceProperties();
            // primitives

            <$$Attr$$
            if (<$$ClassificationName$$>.get<$$uAttrName$$>()!=null) {
                PrimitivePropertyValue primitiveTypePropertyValue = new PrimitivePropertyValue();
                primitiveTypePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_<$$uAttrType$$>);
                primitiveTypePropertyValue.setPrimitiveValue(<$$ClassificationName$$>.get<$$uAttrName$$>());
                instanceProperties.setProperty("<$$AttrName$$>", primitiveTypePropertyValue);
            }
            $$Attr$$>

            <$$Enum$$
            if (<$$ClassificationName$$>.get<$$uEnumName$$>()!=null) {
                <$$uEnumType$$> enumType = <$$ClassificationName$$>.get<$$uEnumName$$>();
                EnumPropertyValue enumTypePropertyValue = new EnumPropertyValue();
                enumTypePropertyValue.setOrdinal(enumType.ordinal());
                enumTypePropertyValue.setSymbolicName(enumType.name());
                instanceProperties.setProperty("<$$EnumName$$>", enumTypePropertyValue);
            }
            $$Enum$$>

            <$$Map$$
            if (<$$ClassificationName$$>.get<$$uMapName$$>()!=null) {

                Map<String,String> map =<$$ClassificationName$$>.get<$$uMapName$$>();
                MapPropertyValue mapTypePropertyValue = new MapPropertyValue();

                for (String key:map.keySet()) {
                   PrimitivePropertyValue primitiveTypePropertyValue = new PrimitivePropertyValue();
                   primitiveTypePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
                   primitiveTypePropertyValue.setPrimitiveValue(map.get(key));
                   mapTypePropertyValue.setMapValue(key,primitiveTypePropertyValue);
                }

                instanceProperties.setProperty("<$$MapName$$>", mapTypePropertyValue);
            }
            $$Map$$>

            omrsClassification.setProperties(instanceProperties);
            // set the type in the classification
            OpenMetadataTypesArchiveAccessor archiveAccessor = OpenMetadataTypesArchiveAccessor.getInstance();
            TypeDef typeDef = archiveAccessor.getEntityDefByName("<$$uClassificationName$$>");
            InstanceType _template =  archiveAccessor.createTemplateFromTypeDef(typeDef);
            InstanceType instanceType = new InstanceType(_template);
            omrsClassification.setType(instanceType);
            return omrsClassification;
    }

}
