/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright Contributors to the ODPi Egeria project. */

package org.odpi.openmetadata.fvt.opentypes.classifications.<$$uname$$>;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.odpi.openmetadata.fvt.opentypes.common.ClassificationBean;
import org.odpi.openmetadata.fvt.opentypes.enums.*;

import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EnumPropertyValue;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.MapPropertyValue;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.PrimitivePropertyValue;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;
import java.io.Serializable;
import java.util.*;

import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;
import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;


import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.annotation.JsonProperty;


/**
 * <$$description$$>
 */

@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown=true)
public class <$$uname$$> extends ClassificationBean {
    private static final Logger log = LoggerFactory.getLogger( <$$uname$$>.class);
    private static final String className =  <$$uname$$>.class.getName();
    private Map<String, Object> extraAttributes;


 private static final String[] PROPERTY_NAMES_SET_VALUES = new String[] {
    <$$$
        "<$$PropertyName$$>",
    $$$>

    // Terminate the list
        null
    };
    private static final String[] ATTRIBUTE_NAMES_SET_VALUES = new String[] {
     <$Attr$$
        "<$$AttrName$$>",
     $Attr$$>

     // Terminate the list
        null
    };
    private static final String[] ENUM_NAMES_SET_VALUES = new String[] {
     <$Enum$$
         "<$$EnumName$$>",
     $Enum$$>

         // Terminate the list
          null
    };
    private static final String[] MAP_NAMES_SET_VALUES = new String[] {
     <$Map$$
         "<$$MapName$$>",
     $Map$$>

         // Terminate the list
         null
    };
    // note the below definitions needs to be fully qualified
    private static final java.util.Set<String> PROPERTY_NAMES_SET = new HashSet<>(new HashSet<>(Arrays.asList(PROPERTY_NAMES_SET_VALUES)));
    private static final java.util.Set<String> ATTRIBUTE_NAMES_SET = new HashSet<>(new HashSet<>(Arrays.asList(ATTRIBUTE_NAMES_SET_VALUES)));
    private static final java.util.Set<String> ENUM_NAMES_SET = new HashSet<>(new HashSet<>(Arrays.asList(ENUM_NAMES_SET_VALUES)));
    private static final java.util.Set<String> MAP_NAMES_SET = new HashSet<>(new HashSet<>(Arrays.asList(MAP_NAMES_SET_VALUES)));
    /**
     * Default constructor
     */
    public <$$uname$$>() {
            super.classificationName="<$$uname$$>";
    }
    @Override
    public InstanceProperties obtainInstanceProperties() {
        final String methodName = "obtainInstanceProperties";
        if (log.isDebugEnabled()) {
               log.debug("==> Method: " + methodName);
        }
        InstanceProperties instanceProperties = new InstanceProperties();
        EnumPropertyValue enumTypePropertyValue=null;
        <$Enum$$
        enumTypePropertyValue = new EnumPropertyValue();
        // <$$description$$>
        if (<$$EnumName$$> !=null) {
            enumTypePropertyValue.setOrdinal(<$$EnumName$$>.ordinal());
            enumTypePropertyValue.setSymbolicName(<$$EnumName$$>.name());
            instanceProperties.setProperty("<$$EnumName$$>",enumTypePropertyValue);
        }
        $Enum$$>
        MapPropertyValue mapTypePropertyValue=null;
        <$Map$$
        // <$$description$$>
        mapTypePropertyValue = new MapPropertyValue();
        //mapTypePropertyValue.setMapValues(this.<$$PropertyName$$>);
        $Map$$>
        PrimitivePropertyValue primitiveTypePropertyValue=null;
        <$Attr$$
        primitiveTypePropertyValue = new PrimitivePropertyValue();
        primitiveTypePropertyValue.setPrimitiveValue(<$$AttrName$$>);
        instanceProperties.setProperty("<$$AttrName$$>",primitiveTypePropertyValue);
        $Attr$$>
        if (log.isDebugEnabled()) {
               log.debug("<== Method: " + methodName);
        }
        return instanceProperties;
    }

   <$$$
       private <$$PropertyType$$> <$$PropertyName$$>;
       /**
        * {@literal <$$AttrDescription$$> }
        * @return {$$PropertyTypeJavadoc$$ }
        */
       public <$$PropertyType$$> get<$$uPropertyName$$>() {
           return this.<$$PropertyName$$>;
       }
       public void set<$$uPropertyName$$>(<$$PropertyType$$> <$$PropertyName$$>)  {
           this.<$$PropertyName$$> = <$$PropertyName$$>;
       }


   $$$>

    /**
     * <$$uname$$> property names
     * @return Set of Strings of the <$$uname$$> property names
     */
    public static java.util.Set<String> getPropertyNames() {
         return PROPERTY_NAMES_SET;
    }

    /**
     * <$$uname$$> map property names
     * @return Set of Strings of the <$$uname$$> map property names
     */
    public static java.util.Set<String> getMapPropertyNames() {
         return MAP_NAMES_SET;
    }

    /**
     * <$$uname$$> enum property names
     * @return Set of Strings of the <$$uname$$> enum property names
     */
    public static java.util.Set<String> getEnumPropertyNames() {
         return ENUM_NAMES_SET;
    }

    /**
     * <$$uname$$> attribute property names
     * @return Set of Strings of the <$$uname$$> attribute property names
     */
    public static java.util.Set<String> getAttributePropertyNames() {
         return ATTRIBUTE_NAMES_SET;
    }



    /**
      * Get the extra attributes - ones that are in addition to the standard types.
      * @return extra attributes
      */
    public Map<String, Object> getExtraAttributes() {
          return extraAttributes;
    }
    public void setExtraAttributes(Map<String, Object> extraAttributes) {
          this.extraAttributes = extraAttributes;
    }
}
