/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright Contributors to the ODPi Egeria project. */

// This is a generated file - do not edit - changes should be made to the templates amd/or generator to generate this file with changes.

package org.odpi.openmetadata.fvt.opentypes.relationships.<$$uRelationshipName$$>;
import org.odpi.openmetadata.fvt.opentypes.common.*;
import org.odpi.openmetadata.fvt.opentypes.enums.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.*;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.*;
import org.odpi.openmetadata.fvt.opentypes.relationships.<$$uRelationshipName$$>.<$$uRelationshipName$$>;

import java.util.*;

/**
 * Static mapping methods to map between <$$uRelationshipName$$> and the omrs Relationship.
 */
public class <$$uRelationshipName$$>Mapper {
       private static final Logger log = LoggerFactory.getLogger(<$$uRelationshipName$$>Mapper.class);
       private static final String className = <$$uRelationshipName$$>Mapper.class.getName();

       public static <$$uRelationshipName$$> mapOmrsRelationshipTo<$$uRelationshipName$$>(Relationship omrsRelationship) {
                String methodName = "mapOmrsRelationshipTo<$$uRelationshipName$$>";
               <$$uRelationshipName$$> <$$RelationshipName$$> = new <$$uRelationshipName$$>(omrsRelationship);
               SystemAttributes systemAttributes = new SystemAttributes();
               systemAttributes.setStatus(omrsRelationship.getStatus());
               systemAttributes.setCreatedBy(omrsRelationship.getCreatedBy());
               systemAttributes.setUpdatedBy(omrsRelationship.getUpdatedBy());
               systemAttributes.setCreateTime(omrsRelationship.getCreateTime());
               systemAttributes.setUpdateTime(omrsRelationship.getUpdateTime());
               systemAttributes.setVersion(omrsRelationship.getVersion());
               systemAttributes.setGUID(omrsRelationship.getGUID());
               <$$RelationshipName$$>.setGuid(omrsRelationship.getGUID());
               <$$RelationshipName$$>.setSystemAttributes(systemAttributes);

               InstanceProperties omrsRelationshipProperties = omrsRelationship.getProperties();
               if (omrsRelationshipProperties !=null) {
                 omrsRelationshipProperties.setEffectiveFromTime(<$$RelationshipName$$>.getEffectiveFromTime());
                 omrsRelationshipProperties.setEffectiveToTime(<$$RelationshipName$$>.getEffectiveToTime());
                 Iterator omrsPropertyIterator = omrsRelationshipProperties.getPropertyNames();
                 while (omrsPropertyIterator.hasNext()) {
                    String name = (String) omrsPropertyIterator.next();
                    //TODO check if this is a property we expect or whether the type has been added to.
                    // this is a property we expect
                    InstancePropertyValue value = omrsRelationshipProperties.getPropertyValue(name);
                    // supplied guid matches the expected type
                    Object actualValue;
                    switch (value.getInstancePropertyCategory()) {
                                               case PRIMITIVE:
                                                   PrimitivePropertyValue primitiveTypePropertyValue = (PrimitivePropertyValue) value;
                                                   actualValue = primitiveTypePropertyValue.getPrimitiveValue();
                                                   if (<$$uRelationshipName$$>.getAttributePropertyNames().contains(name)) {
                                                      <$$Attr$$
                                                      if (name.equals("<$$AttrName$$>")) {
                                                           <$$RelationshipName$$>.set<$$uAttrName$$>((<$$AttrType$$>)actualValue);
                                                      }
                                                      $$Attr$$>
                       
                                                   } else {
                                                       // put out the omrs value object
                                                       if (<$$RelationshipName$$>.getExtraAttributes() ==null) {
                                                            Map<String, Object> extraAttributes = new HashMap<>();
                                                            <$$RelationshipName$$>.setExtraAttributes(extraAttributes);
                                                        }
                                                      <$$RelationshipName$$>.getExtraAttributes().put(name, primitiveTypePropertyValue);
                                                   }
                                                   break;
                                               case ENUM:
                                                   EnumPropertyValue enumTypePropertyValue = (EnumPropertyValue) value;
                                                   String symbolicName = enumTypePropertyValue.getSymbolicName();
                                                   if (<$$uRelationshipName$$>.getEnumPropertyNames().contains(name)) {
                                                       <$$Enum$$
                                                        if (name.equals("<$$EnumName$$>")) {
                                                              <$$uEnumType$$> <$$EnumName$$> = <$$uEnumType$$>.valueOf(symbolicName);
                                                             <$$RelationshipName$$>.set<$$uEnumName$$>(<$$EnumName$$>);
                                                        }
                                                       $$Enum$$>
                       
                                                   } else {
                                                       // put out the omrs value object
                                                        if (<$$RelationshipName$$>.getExtraAttributes() ==null) {
                                                            Map<String, Object> extraAttributes = new HashMap<>();
                                                            <$$RelationshipName$$>.setExtraAttributes(extraAttributes);
                                                        }

                                                        <$$RelationshipName$$>.getExtraAttributes().put(name, enumTypePropertyValue);
                                                    }
                       
                                                   break;
                                               case MAP:
                                                    if (<$$uRelationshipName$$>.getMapPropertyNames().contains(name)) {
                                                        MapPropertyValue mapTypePropertyValue = (MapPropertyValue) value;
                                                        InstanceProperties instancePropertyForMap = (InstanceProperties) mapTypePropertyValue.getMapValues();

                                                        <$$Map$$
                                                        if (name.equals("<$$MapName$$>")) {

                                                             // Only support Map<String,String> as that is what is in the archive types at this time.
                                                             Map<String, String> actualMap = new HashMap<>();
                                                             Iterator iter = instancePropertyForMap.getPropertyNames();
                                                             while (iter.hasNext()) {
                                                                String mapkey = (String) iter.next();
                                                                PrimitivePropertyValue primitivePropertyMapValue = (PrimitivePropertyValue) instancePropertyForMap.getPropertyValue(mapkey);
                                                                String mapvalue = (String) primitivePropertyMapValue.getPrimitiveValue();
                                                                actualMap.put(mapkey, mapvalue);
                                                             }
                                                             <$$RelationshipName$$>.set<$$uMapName$$>(actualMap);
                                                         }
                                                        $$Map$$>

                                                    }
                                                    break;
                                               case ARRAY:
                                               case STRUCT:
                                               case UNKNOWN:
                                                   // error
                                                   break;
                    }
                 }   // end while
               }
               return <$$RelationshipName$$>;
       }
       public static Relationship map<$$uRelationshipName$$>ToOmrsRelationship(<$$uRelationshipName$$> <$$RelationshipName$$>) {
           Relationship omrsRelationship = Line.createOmrsRelationship(<$$RelationshipName$$>);

           SystemAttributes systemAttributes = <$$RelationshipName$$>.getSystemAttributes();
           if (systemAttributes!=null) {
               if (systemAttributes.getCreatedBy()!=null)
                   omrsRelationship.setCreatedBy(systemAttributes.getCreatedBy());
               if (systemAttributes.getUpdatedBy()!=null)
                   omrsRelationship.setUpdatedBy(systemAttributes.getUpdatedBy());
               if (systemAttributes.getCreateTime()!=null)
                   omrsRelationship.setCreateTime(systemAttributes.getCreateTime());
               if (systemAttributes.getUpdateTime()!=null)
                   omrsRelationship.setUpdateTime(systemAttributes.getUpdateTime());
               if (systemAttributes.getVersion()!=null)
                   omrsRelationship.setVersion(systemAttributes.getVersion());
                if (systemAttributes.getGUID()!=null)
                   omrsRelationship.setGUID(systemAttributes.getGUID());
               if (systemAttributes.getStatus()!=null)
                   omrsRelationship.setStatus(systemAttributes.getStatus());
           }
           //set proxy 1
           EntityProxy entityOne = new EntityProxy();
           entityOne.setGUID(<$$RelationshipName$$>.getEntity1Guid());
           String type1 = <$$RelationshipName$$>.getEntity1Type();
           InstanceType instancetype1 = new InstanceType();
           instancetype1.setTypeDefName(type1);
           entityOne.setType(instancetype1);
           //set proxy 2
           EntityProxy entityTwo = new EntityProxy();
           entityTwo.setGUID(<$$RelationshipName$$>.getEntity2Guid());
           String type2 = <$$RelationshipName$$>.getEntity2Type();
           InstanceType instancetype2 = new InstanceType();
           instancetype2.setTypeDefName(type2);
           entityTwo.setType(instancetype2);
           // set relationshipType
           InstanceType relationshipType = new InstanceType();
           relationshipType.setTypeDefGUID(<$$RelationshipName$$>.getTypeDefGuid());
           relationshipType.setTypeDefName("<$$uRelationshipName$$>");
           omrsRelationship.setType(relationshipType);           
   
           omrsRelationship.setEntityOneProxy(entityOne);
           omrsRelationship.setEntityTwoProxy(entityTwo);           
           if (omrsRelationship.getGUID() == null) {
               omrsRelationship.setGUID(<$$RelationshipName$$>.getGuid());
           }

           InstanceProperties instanceProperties = new InstanceProperties();
           // primitives

            <$$Attr$$
            if (<$$RelationshipName$$>.get<$$uAttrName$$>()!=null) {
                PrimitivePropertyValue primitiveTypePropertyValue = new PrimitivePropertyValue();
                primitiveTypePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_<$$uAttrType$$>);
                primitiveTypePropertyValue.setPrimitiveValue(<$$RelationshipName$$>.get<$$uAttrName$$>());
                instanceProperties.setProperty("<$$AttrName$$>", primitiveTypePropertyValue);
            }
            $$Attr$$>

            <$$Enum$$
            if (<$$RelationshipName$$>.get<$$uEnumName$$>()!=null) {
                <$$uEnumType$$> enumType = <$$RelationshipName$$>.get<$$uEnumName$$>();
                EnumPropertyValue enumTypePropertyValue = new EnumPropertyValue();
                enumTypePropertyValue.setOrdinal(enumType.ordinal());
                enumTypePropertyValue.setSymbolicName(enumType.name());
                instanceProperties.setProperty("<$$EnumName$$>", enumTypePropertyValue);
            }
            $$Enum$$>

            omrsRelationship.setProperties(instanceProperties);

           return omrsRelationship;
       }
}
