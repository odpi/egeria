/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright Contributors to the ODPi Egeria project. */
// This is a generated file - do not edit - changes should be made to the templates amd/or generator to generate this file with changes.

package org.odpi.openmetadata.fvt.opentypes.relationships.<$$uname$$>;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import java.util.*;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import org.odpi.openmetadata.fvt.opentypes.common.*;
import org.odpi.openmetadata.fvt.opentypes.enums.*;
import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;
import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;

//omrs
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.*;

/**
 * <$$uname$$> is a relationships between an entity of type <$$entityProxy1Type$$> and an entity of type <$$entityProxy2Type$$>.
 * The ends of the relationships are stored as entity proxies, where there is a 'proxy' name by which the entity type is known.
 * The first entity proxy has <$$entityProxy1Name$$> as the proxy name for entity type <$$entityProxy1Type$$>.
 * The second entity proxy has <$$entityProxy2Name$$> as the proxy name for entity type <$$entityProxy2Type$$>.
 *
 * Each entity proxy also stores the entities guid.

 <$$description$$>
 */
@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown=true)
public class <$$uname$$> extends OMRSLine {
    private static final Logger log = LoggerFactory.getLogger(<$$uname$$>.class);
    private static final String className = <$$uname$$>.class.getName();

   //public java.util.Set<String> propertyNames = new HashSet<>();
      private static final String[] PROPERTY_NAMES_SET_VALUES = new String[] {
      <$$$
          "<$$PropertyName$$>",
      $$$>

      // Terminate the list
          null
      };
      private static final String[] ATTRIBUTE_NAMES_SET_VALUES = new String[] {
       <$Attr$$
          "<$$AttrName$$>",
       $Attr$$>

       // Terminate the list
          null
      };
      private static final String[] ENUM_NAMES_SET_VALUES = new String[] {
       <$Enum$$
           "<$$EnumName$$>",
       $Enum$$>

           // Terminate the list
            null
      };
      private static final String[] MAP_NAMES_SET_VALUES = new String[] {
       <$Map$$
           "<$$MapName$$>",
       $Map$$>

           // Terminate the list
           null
      };
      private static final java.util.Set<String> PROPERTY_NAMES_SET = new HashSet<>(new HashSet<>(Arrays.asList(PROPERTY_NAMES_SET_VALUES)));
      private static final java.util.Set<String> ATTRIBUTE_NAMES_SET = new HashSet<>(new HashSet<>(Arrays.asList(ATTRIBUTE_NAMES_SET_VALUES)));
      private static final java.util.Set<String> ENUM_NAMES_SET = new HashSet<>(new HashSet<>(Arrays.asList(ENUM_NAMES_SET_VALUES)));
      private static final java.util.Set<String> MAP_NAMES_SET = new HashSet<>(new HashSet<>(Arrays.asList(MAP_NAMES_SET_VALUES)));


    public <$$uname$$>() {
        initialise();
    }

    private void initialise()
    {
       name = "<$$uname$$>";
       entity1Name = "<$$entityProxy1Name$$>";
       entity1Type = "<$$entityProxy1Type$$>";
       entity2Name = "<$$entityProxy2Name$$>";
       entity2Type = "<$$entityProxy2Type$$>";
       typeDefGuid = "<$$typeDefGuid$$>";
    }

    public <$$uname$$>(OMRSLine template) {
        super(template);
        initialise();
    }
    public <$$uname$$>(Line template) {
        super(template);
        initialise();
    }

    public <$$uname$$>(Relationship omrsRelationship) {
        super(omrsRelationship);
    }

    InstanceProperties obtainInstanceProperties() {
          final String methodName = "obtainInstanceProperties";
          if (log.isDebugEnabled()) {
                 log.debug("==> Method: " + methodName);
          }
          InstanceProperties instanceProperties = new InstanceProperties();
          EnumPropertyValue enumTypePropertyValue=null;
          <$Enum$$
          enumTypePropertyValue = new EnumPropertyValue();
          // <$$description$$>
          enumTypePropertyValue.setOrdinal(<$$EnumName$$>.ordinal());
          enumTypePropertyValue.setSymbolicName(<$$EnumName$$>.name());
          instanceProperties.setProperty("<$$EnumName$$>",enumTypePropertyValue);
          $Enum$$>
          MapPropertyValue mapTypePropertyValue=null;
          <$Map$$
          // <$$description$$>
          mapTypePropertyValue = new MapPropertyValue();
          $Map$$>
          PrimitivePropertyValue primitiveTypePropertyValue=null;
           <$$$
          primitiveTypePropertyValue = new PrimitivePropertyValue();
          // TODO  description + change null to value
          primitiveTypePropertyValue.setPrimitiveValue(null);
          instanceProperties.setProperty("<$$PropertyName$$>",primitiveTypePropertyValue);
           $$$>
          if (log.isDebugEnabled()) {
                 log.debug("<== Method: " + methodName);
          }
          return instanceProperties;
    }

     <$$$
         private <$$PropertyType$$> <$$PropertyName$$>;
        /**
            * {@literal <$$AttrDescription$$> }
            * @return {@code <$$PropertyTypeJavadoc$$> }
            */
         public <$$PropertyType$$> get<$$uPropertyName$$>() {
             return this.<$$PropertyName$$>;
         }
         public void set<$$uPropertyName$$>(<$$PropertyType$$> <$$PropertyName$$>)  {
            this.<$$PropertyName$$> = <$$PropertyName$$>;
        }
     $$$>

   /**
    * <$$uname$$> property names
    * @return Set of Strings of the <$$uname$$> property names
    */
    public static java.util.Set<String> getPropertyNames() {
       return PROPERTY_NAMES_SET;
    }

    /**
     * <$$uname$$> enum property names
     * @return Set of Strings of the <$$uname$$> enum property names
     */
    public static java.util.Set<String> getEnumPropertyNames() {
         return ENUM_NAMES_SET;
    }
   /**
     * <$$uname$$> map property names
     * @return Set of Strings of the <$$uname$$> map property names
     */
    public static java.util.Set<String> getMapPropertyNames() {
         return ENUM_NAMES_SET;
    }

    /**
     * <$$uname$$> attribute property names
     * @return Set of Strings of the <$$uname$$> attribute property names
     */
    public static java.util.Set<String> getAttributePropertyNames() {
         return ATTRIBUTE_NAMES_SET;
    }

      @Override
         public StringBuilder toString(StringBuilder sb)
         {
             if (sb == null)
             {
                 sb = new StringBuilder();
             }
             sb.append(" <$$uname$$>=");
             sb.append(super.toString(sb));
             sb.append(" <$$uname$$> Attributes{");
             <$Attr$$
             sb.append("<$$AttrName$$>=" + this.<$$AttrName$$> +",");
             $Attr$$>
             <$Enum$$
             if ( <$$EnumName$$>!=null) {
                 sb.append("<$$EnumName$$>=" + <$$EnumName$$>.name());
             }
             $Enum$$>
             sb.append("}");
             return sb;
         }
         @Override
         public String toString() {
             return toString(new StringBuilder()).toString();
         }


}
