/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */


/*
 * Plugins for this parent module only - so just high level project related
 */
plugins {
    id "io.freefair.aggregate-javadoc" version "6.6.3"
    id "io.freefair.lombok" version "6.6.3"
    // Checks for unnecessary dependencies
    id 'com.autonomousapps.dependency-analysis' version "1.19.0"
    // helps resolve log implementation clashes
    id 'dev.jacomet.logging-capabilities' version "0.11.0"
    // This plugin helps resolve jakarta/javax dev.jacomet.logging-capabilities
    id 'org.gradlex.java-ecosystem-capabilities' version "1.1"
    id 'checkstyle'
}


/*
 * Configuration for all projects - INCLUDING this one
 */

allprojects {

    group = 'org.odpi.egeria'
    version = '4.0-SNAPSHOT'

    // Signing/publish used in parent & child projects
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

} // end of allProjects




/*
 * Configuration for sub projects only
 */
subprojects {
    // All tasks currently will run under allProjects - which includes root.
    // Mostly java, so default to this for now
    if (project.name != 'bom') {
        apply plugin: 'java'
        apply plugin: 'jacoco'
        apply plugin: 'checkstyle'
        apply plugin: 'io.freefair.lombok'
        apply plugin: 'com.autonomousapps.dependency-analysis'
        apply plugin: 'dev.jacomet.logging-capabilities'
        apply plugin: 'org.gradlex.java-ecosystem-capabilities'
    }

    // As we've migrated from maven - we'll assume all submodules publish directly to maven

    // Only use maven central
    repositories {
        mavenCentral()
        // used by tink (encrypted filestore connector)
        google()
    }

    // Just like our consumers, we want to depend on our 'BOM' which
    // defines dependency constraints
    if (project.name != 'bom') {

        dependencies {
            implementation platform(project(":bom"))
            modules {
                module('org.glassfish:jakarta.json') {
                    replacedBy 'jakarta.json:jakarta.json-api', 'use jakarta.json.api instead of glassfish'
                }
            }
        }




        // ensures we pick up the very latest snapshots when built
        configurations.all {
            // check for updates every build
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        }



        // we already have bridge modules that implement commons logging, so cannot have another implementation in classpath
        // we also want to avoid the glassfish implementation of jakarta.json (if we have to, will replace as above)
        configurations {
            all {
                exclude module: 'commons-logging'
                exclude module: 'org.glassfish:jakarta.json'
            }
        }
        /*
         * Java related configuration
         */
        java {
            withSourcesJar()
            withJavadocJar()
        }
        tasks.withType(JavaCompile) {
            options.release = 17
            options.encoding = 'UTF-8'
            options.incremental = true
            options.failOnError = true
            options.compilerArgs << "-Xlint:all"
        }

        // javadoc
        javadoc {
            options.addBooleanOption('html5', true)
        }

        // code coverage
        jacoco {
            toolVersion = "0.8.8"
        }

    }

    publishing {
        if (project.name!='bom')
        {
        publications {
            mavenmodule(MavenPublication) {
                from components.java
                pom {
                    url = 'http://egeria.odpi.org'
                    licenses {
                        // Code
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                        // Docs
                        license {
                            name = 'Creative Commons Attribution 4.0 International (CC BY 4.0)'
                            url = 'https://creativecommons.org/licenses/by/4.0'
                        }
                    }
                    developers {
                        developer {
                            id = 'planetf1'
                            name = 'Nigel Jones'
                            email = 'nigel.l.jones+git@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/odpi/egeria.git'
                        developerConnection = 'scm:git:ssh://github.com/odpi/egeria/egeria.git'
                        url = 'http://github.com/odpi/egeria'
                    }
                }
                // Override the project name & description for the pom based on properties set in the child build.gradle (hard to default & required for maven central)
                pom.withXml {
                    asNode().appendNode('name', "${project.name}")
                    asNode().appendNode('description', "${project.description}")
                }
            }
        }
        }
        // Release versions get pushed to staging area on maven central, snapshots to snapshot repo
        // Secrets for credentials
        repositories {
            maven {
                name = 'OSSRH'
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                // User token (under profile) on oss.sonatype.org
                credentials {
                    username = System.getenv("OSSRH_USERNAME")
                    password = System.getenv("OSSRH_TOKEN")
                }
            }
        }
    }

    /*
     * Additional useful tasks
     */
    task printAllDependencies(type: DependencyReportTask) {}
    task printSubDependencies(type: DependencyReportTask) {}
    task findDependency(type: DependencyInsightReportTask) {}

    // Checking of headers etc
    checkstyle {
        toolVersion = '10.7.0'
        showViolations = true
    }
}


/*
 * Additional aggregate tasks run only at parent
 */

// Whilst all modules have their own javadoc, we only build
// an aggregate for the client and API modules plus the REST calls
//javadoc {
//    include("**/api/*.java")
//    include("**/client/*.java")
//    include("**/clients/*.java")
//    include("**/properties/*.java")
//    include("**/metadataelements/*.java")
//    include("**/metadataelement/*.java")
//    include("**/events/*.java")
//    include("**/rest/*.java")
//    include("**/exceptions/*.java")
//    include("**/beans/*.java")
//    include("**/ffdc/*.java")
//    include("**/configuration/*.java")
//    include("**/configuration/registration/*.java")
//    include("**/store/*.java")
//    include("**/connectors/*.java")
//    include("**/adminservices/*.java")
//    include("**/connector/*.java")
//    include("**/frameworks/*.java")
//    include("**/context/*.java")
//    include("**/contextmanager/*.java")
//    include("**/graph/*.java")
//    include("**/model/*.java")
//    include("**/auditlog/*.java")
//    include("**/omrstopic/*.java")
//    include("**/openmetadatatopic/*.java")
//    include("**/archivestore/*.java")
//    include("**/auditlogstore/*.java")
//    include("**/cohortregistrystore/*.java")
//    include("**/repositoryconnector/*.java")
//    include("**/repositoryeventmapper/*.java")
//    include("**/metadatacollectionstore/*.java")
//    include("**/metadatacollectionstore/properties/instances/*.java")
//    include("**/metadatacollectionstore/properties/typedefs/*.java")
//    include("**/metadatacollectionstore/properties/search/*.java")
//    include("**/metadatacollectionstore/utilities/*.java")
//    include("**/archiveutilities/*.java")
//    include("**/metadatasecurity/*.java")
//    include("**/spring/*.java")
//    include("**/frameworks/**/*.java")
//}


// Jacoco reporting -- from gradle docs
task codeCoverageReport(type: JacocoReport) {
    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        if (it.name != 'bom') {
            sourceSets it.sourceSets.main
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.required = true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.required = true
        csv.required = true
    }

}
// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}

// Dependency checking - see https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin
dependencyAnalysis {
    issues {
        all {
            onAny {
                severity('fail')
            }
            onUnusedDependencies {
                exclude("junit:junit", "org.junit.jupiter:junit-jupiter-api",
                        "org.junit.jupiter:junit-jupiter-engine",
                        "org.springdoc:springdoc-openapi-starter-webmvc-ui"
                )
            }
        }
    }
}



// Always run dependency check for every regular build
build.dependsOn("buildHealth")
