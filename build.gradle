/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */


/*
 * Used for Build scripts/plugins only
*/

buildscript {
    repositories {
        mavenCentral()
    }
}

/*
 * Plugins for this parent module only - so just high level project related
 */

plugins {
        id "io.freefair.aggregate-javadoc" version "6.4.1"
        id "io.freefair.lombok" version "6.4.1"
    }

/*
 * Configuration for all projects - INCLUDING this one
 */

allprojects {

    group = 'org.odpi.egeria'
    version = '3.8-SNAPSHOT'

    // Mostly java, so default to this for now
    apply plugin: 'java'
    apply plugin: 'jacoco'
    //apply plugin: 'io.freefair.lombok'

    // As we've migrated from maven - we'll assume all submodules publish directly to maven
    apply plugin: 'maven-publish'

    repositories {
        mavenCentral()
        maven {
            url "https://maven.atlassian.com/3rdparty"
        }
    }

    /*
     * Dependency Management - to fix versions. Pick up maven build settings for now
     */

    // Assign variables for any constraints

    ext {
        antlrVersion = '3.5.2'
        avroVersion = '1.11.0'
        classgraphVersion = '4.8.141'
        classmateVersion = '1.5.1'
        collections4Version='4.4'
        commonscodecVersion = '1.15'
        commonsconfiguration2Version = '2.7'
        commonsconfigurationVersion = '1.10'
        commonsioVersion = '2.11.0'
        commonsloggingVersion = '1.2'
        commonstextVersion = '1.9'
        elasticsearchVersion = '7.17.1'
        findbugsVersion = '3.0.2'
        glassfishVersion = '1.1.4'
        gremlinVersion = '3.5.1'
        groovyVersion = '3.0.9'
        guavaVersion = '31.1-jre'
        hamcrestVersion = '2.2'
        hdrhistogramVersion = '2.1.12'
        hibernatevalidatorVersion = '6.2.0.Final'
        httpclientVersion = '4.5.13'
        httpcoreVersion = '4.4.15'
        jacksonVersion = '2.13.1'
        jacksonaslVersion = '1.9.14-atlassian-6'
        jakartaannotationVersion = '1.3.5'
        jakartapersistenceVersion = '2.2.3'
        janusVersion = '0.6.1'
	    jakartavalidationVersion = '3.0.1'
        javassistVersion = '3.28.0-GA'
        jaxbVersion = '2.3.1'
        jenaVersion = '4.2.0'
        jodatimeVersion = '2.10.13'
        jsonldVersion = '0.13.4'
        junitVersion = '4.13.2'
        junitjupiterVersion = '5.8.2'
        junitplatformVersion = '1.8.2'
        jwtVersion = '0.9.1'
        kafkaVersion = '3.1.0'
        lang3Version='3.8.1'
        lettuceVersion = '6.1.6.RELEASE'
        logbackVersion = '1.2.10'
        luceneVersion = '8.11.1'
        nettyVersion = '4.1.74.Final'
        openlineageVersion = '0.5.2'
        mockitoVersion = '4.4.0'
        ossVersion = '4.14.0'
        plexusVersion = '3.4.1'
        prometheusVersion = '1.8.3'
        quartzVersion = '2.3.2'
        reflectionsVersion = '0.10.2'
        sanitizerVersion = '1.2.3'
        servletVersion = '4.0.1'
        sleepycatVersion = '18.3.12'
        slf4jVersion = '1.7.36'
        snakeyamlVersion = '1.30'
        snappyVersion = '1.1.8.4'
        springdataVersion = '2.6.2'
        springbootVersion = '2.6.4'
        spotbugsVersion = '4.5.3'
        springdocVersion = '1.6.6'
        springldapVersion = '2.3.5.RELEASE'
        springsecurityVersion = '5.6.2'
        swaggerVersion = '2.1.13'
        springwebVersion = '5.3.16'
        testngVersion = '7.5'
        thriftVersion = '0.16.0'
        tinkVersion = '1.6.1'
        tomcatVersion = '9.0.59'
        validationVersion = '2.0.1.Final'
    }

    dependencies {
        constraints {
            implementation("ch.qos.logback:logback-classic:${logbackVersion}")
            implementation("ch.qos.logback:logback-core:${logbackVersion}")
            implementation("com.datastax.oss:java-driver-core:${ossVersion}")
            implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
            implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
            implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
            implementation("com.fasterxml.jackson.core:jackson-datatype-jsr310:${jacksonVersion}")
            implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}")
            implementation("com.fasterxml:classmate:${classmateVersion}")
            implementation("com.github.jsonld-java:jsonld-java:${jsonldVersion}")
            implementation("com.google.crypto.tink:tink:${tinkVersion}")
            implementation("com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}")
            implementation("com.google.code.findbugs:jsr305:${findbugsVersion}")
            implementation("com.google.guava:guava:${guavaVersion}")
            implementation("com.mikesamuel:json-sanitizer:${sanitizerVersion}")
            implementation("com.sleepycat:je:${sleepycatVersion}")
            implementation("commons-codec:commons-codec:${commonscodecVersion}")
            implementation("commons-io:commons-io:${commonsioVersion}")
            implementation("commons-logging:commons-logging:${commonsloggingVersion}")
            implementation("org.apache.commons:commons-text:${commonstextVersion}")
            implementation("io.github.classgraph:classgraph:${classgraphVersion}")
            implementation("io.jsonwebtoken:jjwt:${jwtVersion}")
            implementation("io.lettuce:lettuce-core:${lettuceVersion}")
            implementation("io.micrometer:micrometer-registry-prometheus:${prometheusVersion}")
            implementation("io.netty:netty-handler:${nettyVersion}")
            implementation("io.netty:netty-common:${nettyVersion}")
            implementation("io.netty:netty-buffer:${nettyVersion}")
            implementation("io.netty:netty-codec:${nettyVersion}")
            implementation("io.netty:netty-all:${nettyVersion}")
            implementation("io.netty:netty-transport:${nettyVersion}")
            implementation("io.netty:netty-resolver:${nettyVersion}")
            implementation("io.swagger.core.v3:swagger-annotations:${swaggerVersion}")
            implementation("io.openlineage:openlineage-java:${openlineageVersion}")
            implementation("jakarta.annotation:jakarta.annotation-api:${jakartaannotationVersion}")
            implementation("jakarta.persistence:jakarta.persistence-api:${jakartapersistenceVersion}")
            implementation("jakarta.validation:jakarta.validation-api:${jakartavalidationVersion}")
            implementation("javax.validation:validation-api:${validationVersion}")
            implementation("javax.xml.bind:jaxb-api:${jaxbVersion}")
            implementation("org.apache.avro:avro:${avroVersion}")
            implementation("org.apache.commons:commons-collections4:${collections4Version}")
            implementation("org.apache.commons:commons-lang3:${lang3Version}")
            implementation("org.apache.httpcomponents:httpclient:${httpclientVersion}")
            implementation("org.apache.httpcomponents:httpcore:${httpcoreVersion}")
            implementation("org.apache.httpcomponents:httpcore-nio:${httpcoreVersion}")
            implementation("org.apache.httpcomponents:httpcore-osgi:${httpcoreVersion}")
            implementation("org.apache.jena:jena-core:${jenaVersion}")
            implementation("org.apache.kafka:kafka-clients:${kafkaVersion}")
            implementation("org.apache.lucene:lucene-core:${luceneVersion}")
            implementation("org.apache.lucene:lucene-analyzers-common:${luceneVersion}")
            implementation("org.apache.lucene:lucene-queryparser:${luceneVersion}")
            implementation("org.apache.lucene:lucene-spatial:${luceneVersion}")
            implementation("org.apache.lucene:lucene-spatial-extras:${luceneVersion}")
            implementation("org.apache.tinkerpop:tinkergraph-gremlin:${gremlinVersion}")
            implementation("org.apache.tinkerpop:gremlin-driver:${gremlinVersion}")
            implementation("org.apache.tinkerpop:gremlin-core:${gremlinVersion}")
            implementation("org.apache.tinkerpop:gremlin-groovy:${gremlinVersion}")
            implementation("org.apache.tinkerpop:gremlin-shaded:${gremlinVersion}")
            implementation("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}") //TODO May need to exclude tomcat-annotations-api
            implementation("org.apache.tomcat:tomcat-coyote:${tomcatVersion}") //TODO May need to exclude tomcat-annotations-api
            implementation("org.codehaus.groovy:groovy:${groovyVersion}")
            implementation("org.codehaus.groovy:groovy-cli-picocli:${groovyVersion}")
            implementation("org.codehaus.groovy:groovy-console:${groovyVersion}")
            implementation("org.codehaus.groovy:groovy-jsr223:${groovyVersion}")
            implementation("org.codehaus.groovy:groovy-templates:${groovyVersion}")
            implementation("org.codehaus.groovy:groovysh:${groovyVersion}")
            compileOnly("org.elasticsearch:elasticsearch:${elasticsearchVersion}")
            implementation("org.elasticsearch.client:elasticsearch-rest-client:${elasticsearchVersion}")
            implementation("co.elastic.clients:elasticsearch-java:${elasticsearchVersion}")
            implementation("org.codehaus.plexus:plexus-utils:${plexusVersion}")
            implementation("org.hdrhistogram:HdrHistogram:${hdrhistogramVersion}")
            implementation("org.janusgraph:janusgraph-core:${janusVersion}")
            implementation("org.janusgraph:janusgraph-inmemory:${janusVersion}")
            implementation("org.janusgraph:janusgraph-driver:${janusVersion}")
            implementation("org.javassist:${javassistVersion}")
            implementation("org.quartz-scheduler:quartz:${quartzVersion}")
            implementation("org.reflections:reflections:${reflectionsVersion}")
            implementation("org.springdoc:springdoc-openapi-ui:${springdocVersion}")
            implementation("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
            implementation("org.slf4j:slf4j-api:${slf4jVersion}")
            implementation("org.springframework.boot:spring-boot-autoconfigure:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot-starter-web:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot-starter-validation:${springbootVersion}")
            implementation("org.springframework.data:spring-data-commons:${springdataVersion}")
            implementation("org.springframework.boot:spring-boot-test:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot-starter-test:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot-starter-security:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot-starter-data-redis:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot-starter-actuator:${springbootVersion}")
            implementation("org.springframework.security:spring-security-config:${springsecurityVersion}")
            implementation("org.springframework.security:spring-security-core:${springsecurityVersion}")
            implementation("org.springframework.security:spring-security-ldap:${springsecurityVersion}")
            implementation("org.springframework.security:spring-security-web:${springsecurityVersion}")
            implementation("org.springframework:spring-aop:${springwebVersion}")
            implementation("org.springframework:spring-beans:${springwebVersion}")
            implementation("org.springframework:spring-context:${springwebVersion}")
            implementation("org.springframework:spring-expression:${springwebVersion}")
            implementation("org.springframework:spring-test:${springwebVersion}")
            implementation("org.springframework:spring-jdbc:${springwebVersion}")
            implementation("org.springframework:spring-web:${springwebVersion}")
            implementation("org.springframework:spring-webmvc:${springwebVersion}")
            implementation("org.springframework:spring-tx:${springwebVersion}")
            implementation("org.springframework:spring-core:${springwebVersion}")
            implementation("org.springframework.ldap:ldap-core:${springldapVersion}")
            implementation("javax.servlet:javax.servlet-api:${servletVersion}")
	        implementation("commons-configuration:commons-configuration:${commonsconfigurationVersion}")
	        implementation("org.apache.commons:commons-configuration2:${commonsconfiguration2Version}")
            implementation("org.hibernate:hibernate-validator:${hibernatevalidatorVersion}")

            // testng also used in our 'source' code to support unit tests
            implementation("org.testng:testng:${testngVersion}")
            runtimeOnly("joda-time:joda-time:${jodatimeVersion}")
            implementation("org.yaml:snakeyaml:${snakeyamlVersion}")
            runtimeOnly("org.antlr:antlr-runtime:${antlrVersion}")
            runtimeOnly("org.apache.jena:jena-arq:${jenaVersion}")
            runtimeOnly("org.codehaus.jackson:jackson-mapper-asl:${jacksonaslVersion}")
            runtimeOnly("org.codehaus.jackson:jackson-core-asl:${jacksonaslVersion}")
            runtimeOnly("org.janusgraph:janusgraph-berkeleyje:${janusVersion}")
            runtimeOnly("org.janusgraph:janusgraph-cql:${janusVersion}")
            runtimeOnly("org.janusgraph:janusgraph-lucene:${janusVersion}")
            runtimeOnly("org.xerial.snappy:snappy-java:${snappyVersion}")
            runtimeOnly("org.janusgraph:janusgraph-es:${janusVersion}")
            runtimeOnly("org.xerial.snappy:snappy-java:${snappyVersion}")
	        runtimeOnly("javax.servlet:javax.servlet-api:${servletVersion}")
            testImplementation("junit:junit:${junitVersion}")
            testImplementation("org.glassfish:javax.json:${glassfishVersion}")
            testImplementation("org.junit.jupiter:junit-jupiter:${junitjupiterVersion}")
            testImplementation("org.junit.jupiter:junit-jupiter-api:${junitjupiterVersion}")
            testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitjupiterVersion}")
            testImplementation("org.junit.jupiter:junit-platform-runner:${junitplatformVersion}")
            testImplementation("org.junit.jupiter:junit-platform-suite-api:${junitplatformVersion}")
            testImplementation("org.mockito:mockito-core:${mockitoVersion}")
            testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
            testImplementation("org.mockito:mockito-inline:${mockitoVersion}")
            testImplementation("org.slf4j:slf4j-simple:${slf4jVersion}")
            testImplementation("org.testng:testng:${testngVersion}")
            testImplementation("org.hamcrest:hamcrest:${hamcrestVersion}")
            implementation("org.apache.thrift:libthrift:${thriftVersion}")
        }
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        sourceCompatibility = "11"
        targetCompatibility = "11"
    }


    // Tasks to help in finding dependency chains
    task printAllDependencies(type: DependencyReportTask) {}
    task printSubDependencies(type: DependencyReportTask) {}
    task findDependency(type: DependencyInsightReportTask) {}

    // Whilst all modules have their own javadoc, we only build
    // an aggregate for the client and API modules
    javadoc {
        include ( "**/*api/**/*.java" )
        include ( "**/*client/**/*.java" )
        include ( "**/*framework/**/*.java" )
        // See 6148 - additional refinements
        include ( "**/accessservices/dataengine/**/*.java" )
        exclude ( "**/accessservices/dataengine/server/**/*.java" )
        exclude ( "**/accessservices/**/connectors/**/*.java" )
        exclude ( "**/fvt/client/**/*.java" )
        exclude ( "**/userinterface/**/*.java" )
    }

}

/*
 * Configuration for sub projects only
 */

subprojects {
}

// Aggregation task 

// Jacoco reporting -- from gradle docs
task codeCoverageReport(type: JacocoReport) {
    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.required = true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.required = true
        csv.required = true
    }

}
// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}
