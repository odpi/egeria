/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */


/*
 * Used for Build scripts/plugins only
*/

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
    }
}

/*
 * Plugins for this parent module only - so just high level project related
 */

plugins {
        //id "nebula.lint" version "16.9.0"
        //id "nebula-aggregate-javadocs"
        id "io.freefair.lombok" version "6.3.0"
    }

/* run './gradlew aggregateJavadocs' at top level to build all docs & output to build/docs/javadoc */
apply plugin: 'nebula-aggregate-javadocs'




/*
 * Configuration for all projects - INCLUDING this one
 */

allprojects {

    group = 'org.odpi.egeria'
    version = '3.5-SNAPSHOT'

    // This enforces version checking but is slow to process
    //apply plugin: 'nebula.lint'
    //gradleLint {
    //    rules = ['all-dependency'] // TODO: Change to criticalRules when ready to enforce
    //
    //}


    //apply plugin: "io.spring.dependency-management"

    // Mostly java, so default to this for now
    apply plugin: 'java'
    apply plugin: 'jacoco'

    // As we've migrated from maven - we'll assume all submodules publish directly to maven
    apply plugin: 'maven-publish'

    repositories {
        jcenter()
            maven {
                url "https://maven.atlassian.com/3rdparty"
            }
        }

    /*
     * Dependency Management - to fix versions. Pick up maven build settings for now
     */

    // Assign variables for any constraints where we have multiples at same version

    ext {
        logbackVersion = '1.2.7'
        jacksonVersion = '2.12.2'
        nettyVersion = '4.1.70.Final'
        luceneVersion = '8.11.0'
        gremlinVersion = '3.5.1'
        groovyVersion = '3.0.9'
        springdataVersion = '2.6.0'
        janusVersion = '0.6.0'
        springwebVersion = '5.3.13'
        springldapVersion = '2.3.4.RELEASE'
        springsecurityVersion = '5.6.0'
        tomcatVersion = '9.0.55'
        junitjupiterVersion = '5.8.2'
        mockitoVersion = '4.1.0'
        mockitoVersion = '4.0.0'
        tomcatVersion = '9.0.54'
        junitjupiterVersion = '5.8.1'
        springbootVersion = '2.6.1'
        httpcoreVersion = '4.4.14'
        jenaVersion = '4.2.0'
        elasticsearchVersion = '7.15.2'
    }

    dependencies {
        constraints {
            implementation("ch.qos.logback:logback-classic:${logbackVersion}")
            implementation("ch.qos.logback:logback-core:${logbackVersion}")
            implementation("com.datastax.oss:java-driver-core:4.13.0")
            implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
            implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
            implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
            implementation("com.fasterxml.jackson.core:jackson-datatype-jsr310:${jacksonVersion}")
            implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}")
            implementation("com.fasterxml:classmate:1.5.1")
            implementation("com.github.jsonld-java:jsonld-java:0.13.3")
            implementation("com.google.crypto.tink:tink:1.6.1")
            implementation("com.github.spotbugs:spotbugs-annotations:4.5.0")
            implementation("com.google.code.findbugs:jsr305:3.0.2")
            implementation("com.google.guava:guava:31.0.1-jre")
            implementation("com.mikesamuel:json-sanitizer:1.2.3")
            implementation("com.sleepycat:je:18.3.12")
            implementation("commons-codec:commons-codec:1.15")
            implementation("commons-io:commons-io:2.11.0")
            implementation("commons-logging:commons-logging:1.2")
            implementation("org.apache.commons:commons-text:1.9")
            implementation("io.github.classgraph:classgraph:4.8.137")
            implementation("io.jsonwebtoken:jjwt:0.9.1")
            implementation('io.lettuce:lettuce-core:6.1.5.RELEASE')
            implementation("io.micrometer:micrometer-registry-prometheus:1.8.0")
            implementation("io.netty:netty-handler:${nettyVersion}")
            implementation("io.netty:netty-common:${nettyVersion}")
            implementation("io.netty:netty-buffer:${nettyVersion}")
            implementation("io.netty:netty-codec:${nettyVersion}")
            implementation("io.netty:netty-all:${nettyVersion}")
            implementation("io.netty:netty-transport:${nettyVersion}")
            implementation("io.netty:netty-resolver:${nettyVersion}")
            implementation("io.openlineage:openlineage-java:0.3.1")
            implementation("io.swagger.core.v3:swagger-annotations:2.1.11")
            implementation("jakarta.annotation:jakarta.annotation-api:1.3.5")
            implementation("jakarta.persistence:jakarta.persistence-api:2.2.3")
            implementation("javax.validation:validation-api:2.0.1.Final")
            implementation("javax.xml.bind:jaxb-api:2.3.1")
            implementation("org.apache.avro:avro:1.11.0")
            implementation("org.apache.commons:commons-collections4:4.4")
            implementation("org.apache.commons:commons-lang3:3.12.0")
            implementation("org.apache.httpcomponents:httpclient:4.5.13")
            implementation("org.apache.httpcomponents:httpcore:${httpcoreVersion}")
            implementation("org.apache.httpcomponents:httpcore-nio:${httpcoreVersion}")
            implementation("org.apache.httpcomponents:httpcore-osgi:${httpcoreVersion}")
            implementation("org.apache.jena:jena-core:${jenaVersion}")
            implementation("org.apache.kafka:kafka-clients:3.0.0")
            implementation("org.apache.lucene:lucene-core:${luceneVersion}")
            implementation("org.apache.lucene:lucene-analyzers-common:${luceneVersion}")
            implementation("org.apache.lucene:lucene-queryparser:${luceneVersion}")
            implementation("org.apache.lucene:lucene-spatial:8.4.1")
            implementation("org.apache.lucene:lucene-spatial-extras:${luceneVersion}")
            implementation("org.apache.tinkerpop:tinkergraph-gremlin:${gremlinVersion}")
            implementation("org.apache.tinkerpop:gremlin-driver:${gremlinVersion}")
            implementation("org.apache.tinkerpop:gremlin-core:${gremlinVersion}")
            implementation("org.apache.tinkerpop:gremlin-groovy:${gremlinVersion}")
            implementation("org.apache.tinkerpop:gremlin-shaded:${gremlinVersion}")
            implementation("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}") //TODO May need to exclude tomcat-annotations-api
            implementation("org.apache.tomcat:tomcat-coyote:${tomcatVersion}") //TODO May need to exclude tomcat-annotations-api
            implementation("org.codehaus.groovy:groovy:${groovyVersion}")
            implementation("org.codehaus.groovy:groovy-cli-picocli:${groovyVersion}")
            implementation("org.codehaus.groovy:groovy-console:${groovyVersion}")
            implementation("org.codehaus.groovy:groovy-jsr223:${groovyVersion}")
            implementation("org.codehaus.groovy:groovy-templates:${groovyVersion}")
            implementation("org.codehaus.groovy:groovysh:${groovyVersion}")
            compileOnly("org.elasticsearch:elasticsearch:${elasticsearchVersion}")
            compileOnly("org.elasticsearch.client:elasticsearch-rest-high-level-client:${elasticsearchVersion}")
            implementation("org.elasticsearch.client:elasticsearch-rest-client:${elasticsearchVersion}")
            implementation("org.codehaus.plexus:plexus-utils:3.4.1")
            implementation("org.hdrhistogram:HdrHistogram:2.1.12")
            implementation("org.janusgraph:janusgraph-core:${janusVersion}")
            implementation("org.janusgraph:janusgraph-inmemory:${janusVersion}")
            implementation("org.janusgraph:janusgraph-driver:${janusVersion}")
            implementation("org.javassist:3.27.0-GA")
            implementation("org.quartz-scheduler:quartz:2.3.2")
            implementation("org.reflections:reflections:0.10.2")
            implementation("org.springdoc:springdoc-openapi-ui:1.5.13")
            implementation("org.slf4j:jcl-over-slf4j:1.7.32")
            implementation("org.slf4j:slf4j-api:1.7.32")
            implementation("org.springframework.boot:spring-boot-autoconfigure:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot-starter-web:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot-starter-validation:${springbootVersion}")
            implementation("org.springframework.data:spring-data-commons:${springdataVersion}")
            implementation("org.springframework.boot:spring-boot-test:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot-starter-test:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot-starter-security:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot-starter-data-redis:${springbootVersion}")
            implementation("org.springframework.boot:spring-boot-starter-actuator:${springbootVersion}")
            implementation("org.springframework.security:spring-security-config:${springsecurityVersion}")
            implementation("org.springframework.security:spring-security-core:${springsecurityVersion}")
            implementation("org.springframework.security:spring-security-ldap:${springsecurityVersion}")
            implementation("org.springframework.security:spring-security-web:${springsecurityVersion}")
            implementation("org.springframework:spring-aop:${springwebVersion}")
            implementation("org.springframework:spring-beans:${springwebVersion}")
            implementation("org.springframework:spring-context:${springwebVersion}")
            implementation("org.springframework:spring-expression:${springwebVersion}")
            implementation("org.springframework:spring-test:${springwebVersion}")
            implementation("org.springframework:spring-jdbc:${springwebVersion}")
            implementation("org.springframework:spring-web:${springwebVersion}")
            implementation("org.springframework:spring-webmvc:${springwebVersion}")
            implementation("org.springframework:spring-tx:${springwebVersion}")
            implementation("org.springframework:spring-core:${springwebVersion}")
            implementation("org.springframework.ldap:ldap-core:${springldapVersion}")
            implementation("javax.servlet:javax.servlet-api:4.0.1")
	        implementation("commons-configuration:commons-configuration:1.10")
	        implementation("org.apache.commons:commons-configuration2:2.7")
            implementation("org.hibernate:hibernate-validator:6.2.0.Final")

            // testng also used in our 'source' code to support unit tests
            implementation("org.testng:testng:7.4.0")
            runtimeOnly("joda-time:joda-time:2.10.13")
            implementation("org.yaml:snakeyaml:1.29")
            runtimeOnly("org.antlr:antlr-runtime:3.5.2")
            runtimeOnly("org.apache.jena:jena-arq:${jenaVersion}")
            runtimeOnly("org.codehaus.jackson:jackson-mapper-asl:1.9.14-atlassian-6")
            runtimeOnly("org.codehaus.jackson:jackson-core-asl:1.9.14-atlassian-6")
            runtimeOnly("org.janusgraph:janusgraph-berkeleyje:${janusVersion}")
            runtimeOnly("org.janusgraph:janusgraph-cql:${janusVersion}")
            runtimeOnly("org.janusgraph:janusgraph-lucene:${janusVersion}")
            runtimeOnly("org.xerial.snappy:snappy-java:1.1.8.4")
            runtimeOnly("org.janusgraph:janusgraph-es:${janusVersion}")
            runtimeOnly("org.xerial.snappy:snappy-java:1.1.8.2")
	        runtimeOnly("javax.servlet:javax.servlet-api:4.0.1");
            testImplementation("junit:junit:4.13.2")
            testImplementation("org.glassfish:javax.json:1.1.4")
            testImplementation("org.junit.jupiter:junit-jupiter:${junitjupiterVersion}")
            testImplementation("org.junit.jupiter:junit-jupiter-api:${junitjupiterVersion}")
            testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitjupiterVersion}")
            testImplementation("org.junit.jupiter:junit-platform-runner:1.7.0")
            testImplementation("org.junit.jupiter:junit-platform-suite-api:1.7.0")
            testImplementation("org.mockito:mockito-core:${mockitoVersion}")
            testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
            testImplementation("org.mockito:mockito-inline:${mockitoVersion}")
            testImplementation("org.slf4j:slf4j-simple:1.7.32")
            testImplementation("org.testng:testng:7.3.0")
            testImplementation("org.hamcrest:hamcrest:2.2")
            implementation("org.apache.thrift:libthrift:0.15.0")
        }
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        sourceCompatibility = "11"
        targetCompatibility = "11"
    }


    // Tasks to help in finding dependency chains
    task printAllDependencies(type: DependencyReportTask) {}
    task printSubDependencies(type: DependencyReportTask) {}
    task findDependency(type: DependencyInsightReportTask) {}



}

/*
 * Configuration for sub projects only
 */

subprojects {
}

// Aggregation task 

// Jacoco reporting -- from gradle docs
task codeCoverageReport(type: JacocoReport) {
    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.enabled true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.enabled true
        csv.enabled true
    }

}
// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}
