/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright Contributors to the ODPi Egeria project. */

package org.odpi.openmetadata.adapters.connectors.nannyconnectors.harvestsurveys.schema;

import org.odpi.openmetadata.adapters.connectors.resource.jdbc.ddl.postgres.PostgreSQLColumn;
import org.odpi.openmetadata.adapters.connectors.resource.jdbc.ddl.postgres.PostgreSQLForeignKey;
import org.odpi.openmetadata.adapters.connectors.resource.jdbc.ddl.postgres.PostgreSQLTable;

import java.util.*;

/**
 * Defines the tables used in a survey report database schema.
 */
public enum HarvestSurveysTable implements PostgreSQLTable
{
    /**
     * Details of a Survey report.
     */
    SURVEY_REPORT("sr_report",
                  "Details of a Survey report.",
                  new HarvestSurveysColumn[]{
                          HarvestSurveysColumn.SURVEY_REPORT_GUID
                  },
                  new HarvestSurveysColumn[]{
                          HarvestSurveysColumn.QUALIFIED_NAME,
                          HarvestSurveysColumn.DISPLAY_NAME,
                          HarvestSurveysColumn.DESCRIPTION,
                          HarvestSurveysColumn.PURPOSE,
                          HarvestSurveysColumn.END_TIMESTAMP,
                          HarvestSurveysColumn.START_TIMESTAMP,
                          HarvestSurveysColumn.ASSET_GUID,
                          HarvestSurveysColumn.ASSET_TYPE_NAME,
                          HarvestSurveysColumn.METADATA_COLLECTION_ID,
                          HarvestSurveysColumn.ENGINE_ACTION_GUID,
                          HarvestSurveysColumn.INITIATOR,
                          HarvestSurveysColumn.REQUEST_TYPE,
                          HarvestSurveysColumn.GOVERNANCE_ENGINE_NAME,
                          HarvestSurveysColumn.ENGINE_HOST_USER_ID}),

    ANNOTATION("sr_annotation",
               "Common information for an annotation attached to a survey report.",
               new HarvestSurveysColumn[]{
                       HarvestSurveysColumn.SURVEY_REPORT_GUID,
                       HarvestSurveysColumn.ANNOTATION_GUID,
                       HarvestSurveysColumn.SUBJECT_GUID},
               new HarvestSurveysColumn[]{
                       HarvestSurveysColumn.OPEN_METADATA_TYPE,
                       HarvestSurveysColumn.CREATION_TIME,
                       HarvestSurveysColumn.ANNOTATION_TYPE,
                       HarvestSurveysColumn.SUMMARY,
                       HarvestSurveysColumn.EXPLANATION,
                       HarvestSurveysColumn.EXPRESSION,
                       HarvestSurveysColumn.CONFIDENCE_LEVEL,
                       HarvestSurveysColumn.JSON_PROPERTIES,
                       HarvestSurveysColumn.SUBJECT_TYPE,
                       HarvestSurveysColumn.METADATA_COLLECTION_ID}),


    /**
     * Request for actions generated by the surveys.
     */
    REQUEST_FOR_ACTION("sr_request_for_action",
                       "Request for actions generated by the surveys.",
                       new HarvestSurveysColumn[]{
                               HarvestSurveysColumn.SURVEY_REPORT_GUID,
                               HarvestSurveysColumn.ANNOTATION_GUID,
                               HarvestSurveysColumn.SUBJECT_GUID},
                       new HarvestSurveysColumn[]{
                               HarvestSurveysColumn.CREATION_TIME,
                               HarvestSurveysColumn.ACTION_REQUEST_NAME}),


    /**
     * Request for actions generated by the surveys.
     */
    REQUEST_FOR_ACTION_TARGET("sr_request_for_action_target",
                       "Targets for the request for actions generated by the surveys.",
                       new HarvestSurveysColumn[]{
                               HarvestSurveysColumn.SURVEY_REPORT_GUID,
                               HarvestSurveysColumn.ANNOTATION_GUID,
                               HarvestSurveysColumn.ACTION_REQUEST_GUID,
                               HarvestSurveysColumn.SUBJECT_GUID},
                       new HarvestSurveysColumn[]{
                               HarvestSurveysColumn.CREATION_TIME,
                               HarvestSurveysColumn.ACTION_REQUEST_NAME,
                               HarvestSurveysColumn.ACTION_TARGET_GUID,
                               HarvestSurveysColumn.ACTION_TARGET_TYPE}),


    /**
     * Details of a Data Manager Catalog survey.
     */
    RELATIONAL_DATA_MANAGER_MEASUREMENTS("sr_relational_manager_measurements",
                              "Details of the measurements collected by a survey of a relational data manager.",
                              new HarvestSurveysColumn[]{
                                      HarvestSurveysColumn.SURVEY_REPORT_GUID,
                                      HarvestSurveysColumn.SUBJECT_GUID,
                                      HarvestSurveysColumn.ANNOTATION_GUID,
                                      HarvestSurveysColumn.RESOURCE_NAME},
                              new HarvestSurveysColumn[]{
                                      HarvestSurveysColumn.METADATA_COLLECTION_ID,
                                      HarvestSurveysColumn.SUBJECT_TYPE,
                                      HarvestSurveysColumn.CREATION_TIME,
                                      HarvestSurveysColumn.SCHEMA_COUNT,
                                      HarvestSurveysColumn.TABLE_COUNT,
                                      HarvestSurveysColumn.COLUMN_COUNT,
                                      HarvestSurveysColumn.DATA_SIZE,
                                      HarvestSurveysColumn.ROWS_FETCHED,
                                      HarvestSurveysColumn.ROWS_INSERTED,
                                      HarvestSurveysColumn.ROWS_UPDATED,
                                      HarvestSurveysColumn.ROWS_DELETED,
                                      HarvestSurveysColumn.SESSION_TIME,
                                      HarvestSurveysColumn.ACTIVE_TIME,
                                      HarvestSurveysColumn.LAST_STATS_RESET}),

    FILE_MEASUREMENTS("sr_file_measurements",
                      "Details of individual files surveyed.",
                      new HarvestSurveysColumn[]{
                              HarvestSurveysColumn.ANNOTATION_GUID,
                              HarvestSurveysColumn.PATHNAME},
                      new HarvestSurveysColumn[]{
                              HarvestSurveysColumn.SURVEY_REPORT_GUID,
                              HarvestSurveysColumn.CREATION_TIME,
                              HarvestSurveysColumn.METADATA_COLLECTION_ID,
                              HarvestSurveysColumn.SUBJECT_GUID,
                              HarvestSurveysColumn.SUBJECT_TYPE,
                              HarvestSurveysColumn.FILE_NAME,
                              HarvestSurveysColumn.PATHNAME,
                              HarvestSurveysColumn.FILE_EXTENSION,
                              HarvestSurveysColumn.FILE_TYPE,
                              HarvestSurveysColumn.DEPLOYED_IMPLEMENTATION_TYPE,
                              HarvestSurveysColumn.ENCODING,
                              HarvestSurveysColumn.ASSET_TYPE_NAME,
                              HarvestSurveysColumn.CAN_READ,
                              HarvestSurveysColumn.CAN_WRITE,
                              HarvestSurveysColumn.CAN_EXECUTE,
                              HarvestSurveysColumn.IS_SYM_LINK,
                              HarvestSurveysColumn.IS_HIDDEN,
                              HarvestSurveysColumn.FILE_CREATION_TIME,
                              HarvestSurveysColumn.LAST_FILE_MODIFICATION_TIME,
                              HarvestSurveysColumn.LAST_ACCESSED_TIME,
                              HarvestSurveysColumn.FILE_SIZE,
                              HarvestSurveysColumn.RECORD_COUNT}),

    DIRECTORY_MEASUREMENTS("sr_directory_measurements",
                           "Details of files found in a directory (and subdirectories).",
                           new HarvestSurveysColumn[]{
                                   HarvestSurveysColumn.SURVEY_REPORT_GUID,
                                   HarvestSurveysColumn.CREATION_TIME,
                                   HarvestSurveysColumn.ANNOTATION_GUID,
                                   HarvestSurveysColumn.PATHNAME},
                           new HarvestSurveysColumn[]{
                                   HarvestSurveysColumn.SURVEY_REPORT_GUID,
                                   HarvestSurveysColumn.METADATA_COLLECTION_ID,
                                   HarvestSurveysColumn.SUBJECT_GUID,
                                   HarvestSurveysColumn.SUBJECT_TYPE,
                                   HarvestSurveysColumn.CREATION_TIME,
                                   HarvestSurveysColumn.ANNOTATION_GUID,
                                   HarvestSurveysColumn.DIRECTORY_NAME,
                                   HarvestSurveysColumn.FILE_COUNT,
                                   HarvestSurveysColumn.TOTAL_FILE_SIZE,
                                   HarvestSurveysColumn.SUB_DIRECTORY_COUNT,
                                   HarvestSurveysColumn.READABLE_FILE_COUNT,
                                   HarvestSurveysColumn.WRITEABLE_FILE_COUNT,
                                   HarvestSurveysColumn.EXECUTABLE_FILE_COUNT,
                                   HarvestSurveysColumn.SYM_LINK_FILE_COUNT,
                                   HarvestSurveysColumn.HIDDEN_FILE_COUNT,
                                   HarvestSurveysColumn.FILE_NAME_COUNT,
                                   HarvestSurveysColumn.FILE_EXTENSION_COUNT,
                                   HarvestSurveysColumn.FILE_TYPE_COUNT,
                                   HarvestSurveysColumn.ASSET_TYPE_COUNT,
                                   HarvestSurveysColumn.DEPLOYED_IMPLEMENTATION_TYPE_COUNT,
                                   HarvestSurveysColumn.UNCLASSIFIED_FILE_COUNT,
                                   HarvestSurveysColumn.INACCESSIBLE_FILE_COUNT,
                                   HarvestSurveysColumn.LAST_FILE_CREATION_TIME,
                                   HarvestSurveysColumn.LAST_FILE_MODIFICATION_TIME,
                                   HarvestSurveysColumn.LAST_FILE_ACCESSED_TIME}),

    RESOURCE_MEASURES("sr_resource_measurement",
                      "Details of individual resources surveyed.",
                      new HarvestSurveysColumn[]{
                              HarvestSurveysColumn.SURVEY_REPORT_GUID,
                              HarvestSurveysColumn.ANNOTATION_GUID,
                              HarvestSurveysColumn.SUBJECT_GUID,
                              HarvestSurveysColumn.MEASUREMENT_CATEGORY},
                      new HarvestSurveysColumn[]{
                              HarvestSurveysColumn.SUBJECT_TYPE,
                              HarvestSurveysColumn.CREATION_TIME,
                              HarvestSurveysColumn.MEASUREMENT_NAME,
                              HarvestSurveysColumn.MEASUREMENT_VALUE,
                              HarvestSurveysColumn.MEASUREMENT_DISPLAY_NAME,
                              HarvestSurveysColumn.RESOURCE_CREATION_TIME,
                              HarvestSurveysColumn.LAST_MODIFIED_TIME,
                              HarvestSurveysColumn.LAST_ACCESSED_TIME,
                              HarvestSurveysColumn.RESOURCE_SIZE,
                              HarvestSurveysColumn.ENCODING}),

    PROFILE_MEASURES("sr_profile_measures",
                     "Profile measurements",
                     new HarvestSurveysColumn[]{
                             HarvestSurveysColumn.SURVEY_REPORT_GUID,
                             HarvestSurveysColumn.ANNOTATION_GUID,
                             HarvestSurveysColumn.SUBJECT_GUID,
                             HarvestSurveysColumn.MEASUREMENT_CATEGORY},
                     new HarvestSurveysColumn[]{
                             HarvestSurveysColumn.SUBJECT_TYPE,
                             HarvestSurveysColumn.CREATION_TIME,
                             HarvestSurveysColumn.MEASUREMENT_NAME,
                             HarvestSurveysColumn.MEASUREMENT_VALUE}),


    /**
     * List of files that could not be classified using the file reference data supplied by the Open Metadata Framework (OMF).
     */
    MISSING_FILE_CLASSIFIERS("sr_missing_file_classifiers",
                             "List of files that could not be classified using the file reference data supplied by the Open Metadata Framework (OMF).",
                             new HarvestSurveysColumn[]{
                                     HarvestSurveysColumn.PATHNAME,
                                     HarvestSurveysColumn.SYNC_TIME
                             },
                             new HarvestSurveysColumn[]{
                                     HarvestSurveysColumn.SURVEY_REPORT_GUID,
                                     HarvestSurveysColumn.FILE_NAME,
                                     HarvestSurveysColumn.FILE_EXTENSION,
                                     HarvestSurveysColumn.FILE_TYPE,
                                     HarvestSurveysColumn.ASSET_TYPE_NAME,
                                     HarvestSurveysColumn.DEPLOYED_IMPLEMENTATION_TYPE,
                                     HarvestSurveysColumn.ENCODING}),
    ;

    private final String                 tableName;
    private final String                 tableDescription;
    private final HarvestSurveysColumn[] primaryKeys;
    private final HarvestSurveysColumn[] dataColumns;


    /**
     * Define a repository table.
     *
     * @param tableName name of the table
     * @param tableDescription description of the table
     * @param primaryKeys list of primary keys
     * @param dataColumns list of additional columns
     */
    HarvestSurveysTable(String                 tableName,
                        String                 tableDescription,
                        HarvestSurveysColumn[] primaryKeys,
                        HarvestSurveysColumn[] dataColumns)
    {
        this.tableName        = tableName;
        this.tableDescription = tableDescription;
        this.primaryKeys      = primaryKeys;
        this.dataColumns      = dataColumns;
    }


    /**
     * Return the name of the table.
     *
     * @return name
     */
    @Override
    public String getTableName()
    {
        return tableName;
    }




    /**
     * Return the name of the table.
     *
     * @param schemaName name of schema
     * @return name
     */
    @Override
    public String getTableName(String schemaName)
    {
        return schemaName + "." + tableName;
    }



    /**
     * Return the description of the table.
     *
     * @return text
     */
    @Override
    public String getTableDescription()
    {
        return tableDescription;
    }


    /**
     * Return the columns that are primary keys.
     *
     * @return list of columns
     */
    @Override
    public List<PostgreSQLColumn> getPrimaryKeys()
    {
        if (primaryKeys != null)
        {
            return Arrays.asList(primaryKeys);
        }

        return null;
    }


    /**
     * Return the columns that are not primary keys.
     *
     * @return list of columns
     */
    @Override
    public List<PostgreSQLColumn> getDataColumns()
    {
        if (dataColumns != null)
        {
            return Arrays.asList(dataColumns);
        }

        return null;
    }


    /**
     * Return the name to type map for the columns in this table.
     *
     * @return map
     */
    public Map<String, Integer> getColumnNameTypeMap()
    {
        Map<String, Integer> columnNameTypeMap = new HashMap<>();

        if (primaryKeys != null)
        {
            for (HarvestSurveysColumn column: primaryKeys)
            {
                columnNameTypeMap.put(column.getColumnName(), column.getColumnType().getJdbcType());
            }
        }

        if (dataColumns != null)
        {
            for (HarvestSurveysColumn column: dataColumns)
            {
                columnNameTypeMap.put(column.getColumnName(), column.getColumnType().getJdbcType());
            }
        }


        return columnNameTypeMap;
    }


    /**
     * Return the list of foreign keys for this table.
     *
     * @return list
     */
    @Override
    public List<PostgreSQLForeignKey> getForeignKeys()
    {
        return null;
    }


    /**
     * Return the tables for schema building.
     *
     * @return list of tables
     */
    public static List<PostgreSQLTable> getTables()
    {
        return new ArrayList<>(Arrays.asList(HarvestSurveysTable.values()));
    }


    /**
     * Standard toString method.
     *
     * @return JSON style description of variables.
     */
    @Override
    public String toString()
    {
        return "HarvestSurveysTable{" + tableName + "}";
    }
}
