# Egeria-feedback-manager-omvs
# Adds feedback (comments, star ratings, likes), informal tags or notes to elements.
# This adornment may be public or private to the the user that creates it.  The isPublic request parameter is
# used to control the visibility.  By default it is private, however each of the requests below set isPublic=true.
#
# Element Feedback: https://egeria-project.org/patterns/metadata-manager/overview/#asset-feedback
# Element Classifiers:  https://egeria-project.org/patterns/metadata-manager/overview/#asset-classifiers
# Element Note logs: https://egeria-project.org/patterns/metadata-manager/overview/#asset-note-logs

@baseURL=https://localhost:9443
@viewServer=view-server

# Optional request options not show on the example requests below:
# -------------------------------------------------------------------
# Note: This a generic service which means the URL marker of "feedback-manager" can be replaced with the URL marker
# of any other active view service.
# The URL marker is derived from the name of the requested service - take the short two-word service name, convert to
# lower case and add a hyphen between the two words - so Automated Curation's OMVS's URL Marker is automated-curation.



###
# =====================================================================================================================
# Manage the authentication token.  Run this request to create/refresh the token.

# @name Token (RequestBody)
POST {{baseURL}}/api/token
Content-Type: application/json

{
  "userId" : "peterprofile",
  "password" : "secret"
}

> {% client.global.set("token", response.body); %}

###

@elementGUID=add guid here

###
# =====================================================================================================================
# Comments allow text-based feedback on elements.
#
# Comment:  https://egeria-project.org/concepts/comment/

@commentGUID=add guid here
@questionCommentGUID=add guid here
@answerCommentGUID=add guid here

###
# @name addCommentToElement
#  Creates a comment and attaches it to an element.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/comments
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewFeedbackRequestBody",
  "properties" : {
    "class" : "CommentProperties",
    "qualifiedName" : "Add unique name here",
    "description" : "Add comment text here",
    "commentType" : "STANDARD_COMMENT",
    "additionalProperties" : {
      "propertyName 1" : "property value 1",
      "propertyName 2" : "property value 2"
    }
  }
}


###
# @name addCommentReply
# Adds a reply to a comment. Optional request parameters:
#  
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/comments/{{commentGUID}}/replies
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewFeedbackRequestBody",
  "properties" : {
    "class" : "CommentProperties",
    "qualifiedName" : "Add unique name here",
    "description" : "Add comment text here",
    "commentType" : "STANDARD_COMMENT",
    "additionalProperties" : {
      "propertyName 1" : "property value 1",
      "propertyName 2" : "property value 2"
    }
  }
}


###
# @name updateComment
# Update an existing comment.
# The request body property mergeUpdate indicates wither the new properties should be merged with existing properties (true) or completely replace them (false)?

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/comments/{{commentGUID}}/update
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "mergeUpdate": true,
  "properties" : {
    "class" : "CommentProperties",
    "qualifiedName" : "Add unique name here",
    "text" : "Add comment text here",
    "description" : "GENERAL_COMMENT",
    "additionalProperties" : {
      "propertyName 1" : "property value 1",
      "propertyName 2" : "property value 2"
    }
  }
}


###
# @name setupAcceptedAnswer
# Link a comment that contains the best answer to a question posed in another comment.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/comments/questions/{{questionCommentGUID}}/answers/{{answerCommentGUID}}
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name clearAcceptedAnswer
# Unlink a comment that contains an answer to a question posed in another comment.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/comments/questions/{{questionCommentGUID}}/answers/{{answerCommentGUID}}/remove
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name removeCommentFromElement
# Removes a comment added to the element by this user.  This deletes the link to the comment, the comment itself and any comment replies attached to it.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/comments/{{commentGUID}}/remove
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name getCommentByGUID
# Return the requested comment.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/comments/{{commentGUID}}/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name getAttachedComments
# Return the comments attached to an element.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/comments/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json

###
# @name findComments
# Return the list of comments containing the supplied string. The search string is located in the request body and is interpreted as a plain string.  The request parameters, startsWith, endsWith and ignoreCase can be used to allow a fuzzy search.  The request body also supports the specification of an effective time to restrict the search to element that are/were effective at a particular time.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/comments/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString" : "Add value here",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# =====================================================================================================================
# Likes are a flag that registers a user's approval of an element.  A user can only add one like to an element.
# The number of likes on an element are typically used to show its relative popularity.

###
# @name addLikeToElement
# Creates a "like" object and attaches it to an element. Request body is optional.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/likes
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewFeedbackRequestBody",
  "properties" : {
    "class" : "LikeProperties",
    "emoji" : "Add characters here as text"
  }
}


###
# @name removeLikeFromElement
# Removes a "Like" added to the element by this user.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/likes/remove
Authorization: Bearer {{token}}
Content-Type: application/json

###
# @name getAttachedLikes
# Return the likes attached to an element.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/likes/retrieve?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json


###
# =====================================================================================================================
# Ratings allow a star rating - from 0 to 5 stars - to be added to an element as an indication of how good it is.
# It is also possible to add review comments expressing the reason for the rating. A user can only add one rating
# to an element, but they can modify it.
#
# The number of stars on an element are typically aggregated to show its relative popularity.


###
# @name addRatingToElement
# Adds or updates a star rating and optional review text to the element.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/ratings?isPublic=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "RatingProperties",
  "starRating" : "TWO_STARS",
  "review" : "Add comments here"
}


###
# @name removeRatingFromElement
# Removes of a star rating/review that was added to the element by this user.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/ratings/remove
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name getAttachedRatings
# Return the ratings attached to an element.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/ratings/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json

###
# =====================================================================================================================
# Informal tags are labels (with an optional description) that can be used to group elements together or mark
# them as having a particular property.  Informal tags are maintained bythe consumers of the metadata elements.
# They can be private to an individual user, or public. Multiple tags can have the same name.
#
# When a tag is attached to an element, the relationship can either be private to a user or public.  This means a user
# can use public tags, but make their use of them private.
#
# Informal Tag:  https://egeria-project.org/concepts/informal-tag/

@tagGUID=add guid here

###
# @name createInformalTag
# Creates a new informal tag and returns the unique identifier for it.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/tags
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "TagProperties",
  "displayName"         : "Add tag name here",
  "description"  : "Add tag description here"
}


###
# @name updateTagDescription
# Updates the description of an existing tag (either private or public).

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/tags/{{tagGUID}}/update
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "InformalTagUpdateRequestBody",
  "description" : "Add new description here"
}


###
# @name deleteTag
# Removes an informal tag from the repository.  All the tagging relationships to this informal tag are lost.
# A private tag can be deleted by its creator and all the references are lost; a public tag can be deleted by anyone,
# but only if it is not attached to any referenceable.
#

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/tags/{{tagGUID}}/remove
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name getTag
# Return the informal tag for the supplied unique identifier (tagGUID).
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/tags/{{tagGUID}}/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name getTagsByName
# Return the tags exactly matching the supplied name.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/tags/by-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "filter" : "Add name here",
  "startFrom" : 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name findTags
# Return the list of informal tags containing the supplied string in their name or description. The search string is located in the request body and is interpreted as a plain string.  The request parameters, startsWith, endsWith and ignoreCase can be used to allow a fuzzy search.  The request body also supports the specification of an effective time to restrict the search to element that are/were effective at a particular time.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/tags/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString" : "Add value here",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name findMyTags
#  Return the list of the calling user's tags containing the supplied string in either the name or description.  The search string is located in the request body and is interpreted as a plain string.  The request parameters, startsWith, endsWith and ignoreCase can be used to allow a fuzzy search.  The request body also supports the specification of an effective time to restrict the search to element that are/were effective at a particular time.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/tags/private/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString" : "Add value here",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name addTagToElement
# Adds an informal tag to an element.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/tags/{{tagGUID}}?isPublic=true
Authorization: Bearer {{token}}
Content-Type: application/json



###
# @name getElementsByTag
# Return the list of elements that are linked to a specific tag.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/by-tag/{{tagGUID}}/retrieve?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name getAttachedTags
# Return the informal tags attached to an element.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/tags/retrieve?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name removeTagFromElement
# Removes a link between a tag and an element that was added by this user.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/tags/{{tagGUID}}/remove
Authorization: Bearer {{token}}
Content-Type: application/json



###
# =====================================================================================================================
# A note log maintains an ordered list of notes.  It can be used to support release note, blogs and similar
# broadcast information.  Notelogs are typically maintained by the owners/stewards of an element.
#
# Note Logs: https://egeria-project.org/concepts/note-log/

@noteLogGUID=add guid here

###
# @name createNoteLog
# Creates a new noteLog and returns the unique identifier for it.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/note-logs
Authorization: Bearer {{token}}
Content-Type: application/json

{
    "class" : "NewFeedbackRequestBody",
    "initialClassifications": {
      "ZoneMembership" : {
        "class" : "ZoneMembershipProperties",
        "zoneMembership" : [ "erinoverview", "peterprofile" ]
      }
    },
    "properties": {
      "class": "NoteLogProperties",
      "qualifiedName": "Add unique name here",
      "displayName": "Add name here",
      "description": "Add description here",
      "additionalProperties": {
        "propertyName 1": "property value 1",
        "propertyName 2": "property value 2"
      }
    }
}


###
# @name updateNoteLog
# Update an existing note log.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/note-logs/{{noteLogGUID}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "mergeUpdate": true,
  "properties" : {
    "class" : "NoteLogProperties",
    "qualifiedName" : "Add unique name here",
    "displayName" : "Add name here",
    "description" : "Add description here",
    "additionalProperties" : {
      "propertyName 1" : "property value 1",
      "propertyName 2" : "property value 2"
    }
  }
}


###
# @name removeNoteLog
# Removes a note log from the repository.  All the relationships to referenceables are lost.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/note-logs/{{noteLogGUID}}/remove
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name findNoteLogs
# Retrieve the list of note log metadata elements that contain the search string.  The search string is located in the request body and is interpreted as a plain string.  The request parameters, startsWith, endsWith and ignoreCase can be used to allow a fuzzy search.  The request body also supports the specification of an effective time to restrict the search to element that are/were effective at a particular time.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/note-logs/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString" : "Add value here",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name getNoteLogsByName
# Retrieve the list of note log metadata elements with an exact matching qualifiedName or name.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/note-logs/by-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "filter" : "Add name here",
  "startFrom" : 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name getNoteLogsForElement
# Retrieve the list of note log metadata elements attached to the element.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/elements/{{elementGUID}}/note-logs/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name getNoteLogByGUID
# Retrieve the note log metadata element with the supplied unique identifier.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/note-logs/{{noteLogGUID}}/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json


###
# ===============================================================================
# A note log typically contains many notes, linked with relationships.
#

@noteGUID=add guid here

###
# @name createNote
# Creates a new note for a note log and returns the unique identifier for it.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/assets
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "{{noteLogGUID}}",
  "isOwnAnchor": false,
  "parentGUID": "{{noteLogGUID}}",
  "parentRelationshipTypeName": "AttachedNoteLogEntry",
  "parentAtEnd1": true,
  "properties": {
    "class" : "NotificationProperties",
    "typeName" : "Notification",
    "qualifiedName": "add unique name here",
    "displayName": "add short name here",
    "description": "add description here",
    "systemAction" : "add optional system action that occurred as part of this notification processing",
    "userResponse" : "add optional action that the reader should take",
    "priority" : 1,
    "activityStatus" : "FOR_INFO",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name updateNote
# Update an existing note.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/notes/{{noteGUID}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "mergeUpdate": true,
  "properties": {
    "class" : "NotificationProperties",
    "typeName" : "Notification",
    "qualifiedName": "add unique name here",
    "displayName": "add short name here",
    "description": "add description here",
    "systemAction" : "add optional system action that occurred as part of this notification processing",
    "userResponse" : "add optional action that the reader should take",
    "priority" : 1,
    "activityStatus" : "FOR_INFO",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    }
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name removeNote
# Removes a note from the repository.  All the relationships to referenceables are lost.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/assets/{{noteGUID}}/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteElementRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name findNotes
# Retrieve the list of note metadata elements that contain the search string.  The search string is located in the request body and is interpreted as a plain string.  The request parameters, startsWith, endsWith and ignoreCase can be used to allow a fuzzy search.  The request body also supports the specification of an effective time to restrict the search to element that are/were effective at a particular time.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/assets/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString" : "Add value here",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name getNotesForNoteLog
# Retrieve the list of notes associated with a note log.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/note-logs/{{noteLogGUID}}/notes/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name getNoteByGUID
# Retrieve the note metadata element with the supplied unique identifier.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/feedback-manager/assets/{{noteGUID}}/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json




