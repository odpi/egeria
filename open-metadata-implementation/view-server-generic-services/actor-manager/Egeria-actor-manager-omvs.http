# Egeria-actor-manager-view-service
# The Actor Manager OMVS provides APIs for supporting the creation and editing of actor profiles, 
#actor roles and user identities.

@baseURL=https://localhost:9443
@viewServer=view-server

###
# =====================================================================================================================
# Manage the authentication token.  Run this request to create/refresh the token.

# @name Token (RequestBody)
POST {{baseURL}}/api/token
Content-Type: application/json

{
  "userId" : "peterprofile",
  "password" : "secret"
}

> {% client.global.set("token", response.body); %}


###
# =====================================================================================================================
# Work with Actor Profiles
# https://egeria-project.org/concepts/actor-profile

@actorProfileGUID=add guid here


###
# @name createActorProfile
# Create a actor profile.
#
# Request body provides             properties for the actor profile.
#
# Returns unique identifier of the newly created element
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-profiles
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "RelationshipElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "properties": {
    "class" : "ActorProfileProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "displayName": "add short name here",
    "description": "add description here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name createActorProfileFromTemplate
# Create a new metadata element to represent a actor profile using an existing metadata element as a template.
# The template defines additional classifications and relationships that should be added to the new element.
#
# Request body provides properties that override the template
#
# Returns unique identifier of the new metadata element
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-profiles/from-template
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "TemplateRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "RelationshipElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "templateGUID": "add guid here",
  "replacementProperties": {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "placeholderPropertyValues":  {
    "placeholder1" : "propertyValue1",
    "placeholder2" : "propertyValue2"
  }
}


###
# @name updateActorProfile
# Update the properties of a actor profile.
#
# @param actorProfileGUID unique identifier of the actor profile (returned from create)
# Request body provides     properties for the new element.
#
# Returns void or
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-profiles/{{actorProfileGUID}}/update
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "mergeUpdate": true,
  "properties": {
    "class" : "ActorProfileProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "displayName": "add short name here",
    "description": "add description here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@assetGUID=add guid here
@itProfileGUID=add guid here

###
# @name linkAssetToProfile
# Attach an asset to an IT profile.
#
# @param assetGUID       unique identifier of the asset
# @param itProfileGUID            unique identifier of the IT profile
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/assets/{{assetGUID}}/it-profiles/{{itProfileGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "RelationshipProperties",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}

###
# @name detachAssetFromProfile
# Detach an asset from an IT profile.
#
# @param assetGUID       unique identifier of the asset
# @param itProfileGUID            unique identifier of the IT profile
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/assets/{{assetGUID}}/it-profiles/{{itProfileGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "deleteMethod": "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name deleteActorProfile
# Delete a actor profile.
#
# @param actorProfileGUID  unique identifier of the element to delete
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-profiles/{{actorProfileGUID}}/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteElementRequestBody",
  "cascadeDelete" : false,
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name getActorProfilesByName
# Returns the list of actor profiles with a particular name.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-profiles/by-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "filter" : "Add name here",
  "startFrom": 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name findActorProfiles
# Retrieve the list of actor profile metadata elements that contain the search string.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-profiles/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString": "xxx",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 0,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name getActorProfileByGUID
# Return the properties of a specific actor profile.
#
# @param actorProfileGUID    unique identifier of the required element
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-profiles/{{actorProfileGUID}}/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "GetRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name createActorRole
# Create a actor role.
#
# Request body provides             properties for the actor role.
#
# Returns unique identifier of the newly created element
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "RelationshipElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "properties": {
    "class" : "ActorRoleProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "displayName":"add name here",
    "identifier": "add name here",
    "description": "add description here",
    "scope": "add scope here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name createActorRoleFromTemplate
# Create a new metadata element to represent a actor role using an existing metadata element as a template.
# The template defines additional classifications and relationships that should be added to the new element.
#
# Request body provides properties that override the template
#
# Returns unique identifier of the new metadata element
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles/from-template
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "TemplateRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "RelationshipElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "templateGUID": "add guid here",
  "replacementProperties": {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "placeholderPropertyValues":  {
    "placeholder1" : "propertyValue1",
    "placeholder2" : "propertyValue2"
  }
}


###
# @name updateActorRole
# Update the properties of a actor role.
#
# @param actorRoleGUID unique identifier of the actor role (returned from create)
# Request body provides     properties for the new element.
#
# Returns void or
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles/update
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "mergeUpdate": true,
  "properties": {
    "class" : "ActorRoleProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "displayName":"add name here",
    "identifier": "add name here",
    "description": "add description here",
    "scope": "add scope here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@personRoleGUID=add guid here
@personProfileGUID=add guid here

###
# @name linkPersonRoleToProfile
# Attach a person role to a person profile.
#
# @param personRoleGUID       unique identifier of the person role
# @param personProfileGUID            unique identifier of the person profile
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles/{{personRoleGUID}}/person-role-appointments/{{personProfileGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "PersonRoleAppointmentProperties",
    "isPublic": true,
    "expectedTimeAllocationPercent": 100,
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name detachPersonRoleFromProfile
# Detach a person role from a profile.
#
# @param personRoleGUID       unique identifier of the person role
# @param personProfileGUID            unique identifier of the person profile
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles/{{personRoleGUID}}/person-role-appointments/{{personProfileGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "deleteMethod": "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@teamRoleGUID=add guid here
@teamProfileGUID=add guid here

###
# @name linkTeamRoleToProfile
# Attach a team role to a team profile.
#
# @param teamRoleGUID           unique identifier of the team role
# @param teamProfileGUID        unique identifier of the team profile
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles/{{teamRoleGUID}}/team-role-appointments/{{teamProfileGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "TeamRoleAppointmentProperties",
    "expectedTimeAllocationPercent": 100,
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name Detach a team role from a team profile.
# Detach a team role from a team profile.
#
# @param teamRoleGUID           unique identifier of the team role
# @param teamProfileGUID        unique identifier of the team profile
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles/{{teamRoleGUID}}/team-role-appointments/{{teamProfileGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "deleteMethod": "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name linkITProfileRoleToProfile
# Attach an IT profile role to an IT profile.
#
# @param itProfileRoleGUID      unique identifier of the IT profile role
# @param itProfileGUID          unique identifier of the IT profile
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles/{{itProfileRoleGUID}}/it-profile-role-appointments/{{itProfileGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "ITProfileRoleAppointmentProperties",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}

###

@itProfileRoleGUID=add guid here

###
# @name detachITProfileRoleFromProfile
# Detach an IT profile role from an IT profile.
#
# @param itProfileRoleGUID      unique identifier of the IT profile role
# @param itProfileGUID          unique identifier of the IT profile
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles/{{itProfileRoleGUID}}/it-profile-role-appointments/{{itProfileGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name deleteActorRole
# Delete a actor role.
#
# @param actorRoleGUID  unique identifier of the element to delete
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "cascadeDelete" : false,
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name getActorRolesByName
# Returns the list of actor roles with a particular name.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles/by-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "filter" : "Add name here",
  "startFrom": 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name findActorRoles
# Retrieve the list of actor role metadata elements that contain the search string.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString": "xxx",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 0,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}

###

@actorRoleGUID=add guid here


###
# @name getActorRoleByGUID
# Return the properties of a specific actor role.
#
# @param actorRoleGUID    unique identifier of the required element
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/actor-roles/{{actorRoleGUID}}/retrieve"})
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "GetRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@userIdentityGUID=add guid here

###
# @name createUserIdentity
# Create a user identity.
#
# Request body provides             properties for the user identity.
#
# Returns unique identifier of the newly created element
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/user-identities
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "RelationshipElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "properties": {
    "class" : "UserIdentityProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "userId":"add name here",
    "distinguishedName": "add name here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name createUserIdentityFromTemplate
# Create a new metadata element to represent a user identity using an existing metadata element as a template.
# The template defines additional classifications and relationships that should be added to the new element.
#
# Request body provides properties that override the template
#
# Returns unique identifier of the new metadata element
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/user-identities/from-template
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "TemplateRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "templateGUID": "add guid here",
  "replacementProperties": {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "placeholderPropertyValues":  {
    "placeholder1" : "propertyValue1",
    "placeholder2" : "propertyValue2"
  }
}


###
# @name updateUserIdentity
# Update the properties of a user identity.
#
# @param userIdentityGUID unique identifier of the user identity (returned from create)
# Request body provides     properties for the new element.
#
# Returns void or
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/user-identities/{{userIdentityGUID}}/update
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "mergeUpdate": true,
  "properties": {
    "class" : "UserIdentityProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "userId":"add name here",
    "distinguishedName": "add name here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name linkIdentityToProfile
# Attach a profile to a user identity.
#
# @param userIdentityGUID unique identifier of the user identity
# @param profileGUID unique identifier of the actor profile
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/user-identities/{{userIdentityGUID}}/profile-identity/{{actorProfileGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "ProfileIdentityProperties",
    "roleTypeName": "",
    "roleGUID": "",
    "description": "",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name detachProfileIdentity
# Detach an actor profile from a user identity.
#
# @param userIdentityGUID unique identifier of the user identity
# @param profileGUID unique identifier of the actor profile
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/user-identities/{{userIdentityGUID}}/profile-identity/{{actorProfileGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

 {
  "class" : "DeleteRelationshipRequestBody",
  "deleteMethod": "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name addSecurityGroupMembership
# Add the SecurityGroupMembership classification to the user identity.
#
# @param userIdentityGUID unique identifier of the user identity
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/user-identities/{{userIdentityGUID}}/security-group-memberships/classify
Authorization: Bearer {{token}}
Content-Type: application/json


{
  "class" : "NewClassificationRequestBody",
  "properties": {
    "class": "SecurityGroupMembershipProperties",
    "groups": [""],
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name updateSecurityGroupMembership
# Update the SecurityGroupMembership classification to the user identity.
#
# @param userIdentityGUID unique identifier of the user identity
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/user-identities/{{userIdentityGUID}}/security-group-memberships/reclassify
Authorization: Bearer {{token}}
Content-Type: application/json


{
  "class" : "UpdateClassificationRequestBody",
  "mergeUpdate" : true,
  "properties": {
    "class": "SecurityGroupMembershipProperties",
    "groups": [""],
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name removeAllSecurityGroupMembership
# Remove the SecurityGroupMembership classification from the user identity.
#
# @param userIdentityGUID unique identifier of the user identity
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/user-identities/{{userIdentityGUID}}/security-group-memberships/declassify
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "MetadataSourceRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name deleteUserIdentity
# Delete a user identity.
#
# @param userIdentityGUID  unique identifier of the element to delete
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/user-identities/{{userIdentityGUID}}/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteElementRequestBody",
  "cascadeDelete" : false,
  "deleteMethod": "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name getUserIdentitiesByName
# Returns the list of user identities with a particular name.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/user-identities/by-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "filter" : "Add name here",
  "startFrom": 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name findUserIdentities
# Retrieve the list of user identity metadata elements that contain the search string.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/user-identities/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString": "xxx",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 0,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name getUserIdentityByGUID
# Return the properties of a specific user identity.
#
# @param userIdentityGUID    unique identifier of the required element
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/actor-manager/user-identities/{{userIdentityGUID}}/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "GetRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###

@actorGUID=add guid here
@scopeElementGUID=add guid here

###
# @name linkAssignmentScope
# Attach an actor to an element that describes its scope. Request body is optional.
# https://egeria-project.org/concepts/actor/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/governance-officer/elements/{{scopeElementGUID}}/actors/{{actorGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "AssignmentScopeProperties",
    "description": "",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}

###
# @name detachAssignmentScope
# Detach an actor from the element that describes its scope. Request body is optional.
# https://egeria-project.org/concepts/actor/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/governance-officer/elements/{{scopeElementGUID}}/actors/{{actorGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###