# Egeria-connection-maker-view-service
# The Connection Maker OMVS provides APIs for supporting the creation and editing of connections,
#connectorTypes and endpoints.

@baseURL=https://localhost:9443
@viewServer=view-server

###
# =====================================================================================================================
# Manage the authentication token.  Run this request to create/refresh the token.

# @name Token (RequestBody)
POST {{baseURL}}/api/token
Content-Type: application/json

{
  "userId" : "peterprofile",
  "password" : "secret"
}

> {% client.global.set("token", response.body); %}


###
# =====================================================================================================================
# Work with connections
# https://egeria-project.org/concepts/connection

@connectionGUID=add guid here
@embeddedConnectionGUID=add guid here
@connectorTypeGUID=add guid here
@endpointGUID=add guid here

@assetGUID=add guid here

###
# @name createConnection
# Create a connection.
#
# Request body provides             properties for the connection.
#
# Returns unique identifier of the newly created element
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "RelationshipElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "properties": {
    "class" : "ConnectionProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "displayName": "add short name here",
    "description": "add description here",
    "userId": "add user id here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "configurationProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name createConnectionFromTemplate
# Create a new metadata element to represent a connection using an existing metadata element as a template.
# The template defines additional classifications and relationships that should be added to the new element.
#
# Request body provides properties that override the template
#
# Returns unique identifier of the new metadata element
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections/from-template
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "TemplateRequestBody",
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "RelationshipElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "templateGUID": "add guid here",
  "replacementProperties": {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "placeholderPropertyValues":  {
    "placeholder1" : "propertyValue1",
    "placeholder2" : "propertyValue2"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name updateConnection
# Update the properties of a connection.
#
# @param connectionGUID unique identifier of the connection (returned from create)
# Request body provides     properties for the new element.
#
# Returns void or
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections/{{connectionGUID}}/update
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "mergeUpdate": true,
  "properties": {
    "class" : "ConnectionProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "displayName": "add short name here",
    "description": "add description here",
    "userId": "add user id here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name linkConnectionConnectorType
# Create a ConnectionConnectorType relationship between a connection and a connector type.
#
# @param connectionGUID       unique identifier of the connection
# @param connectorTypeGUID           unique identifier of the connector type
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections/{{connectionGUID}}/connector-types/{{connectorTypeGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "ConnectionConnectorTypeProperties",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name detachConnectionConnectorType
# Remove the ConnectionConnectorType relationship between a connection and a connector type.
#
# @param connectionGUID       unique identifier of the connection
# @param connectorTypeGUID           unique identifier of the connector type
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections/{{connectionGUID}}/connector-types/{{connectorTypeGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "cascadedDelete" : false,
  "deleteMethod" : "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name linkConnectionEndpoint
# Create a ConnectToEndpoint relationship between a connection and an endpoint.
#
# @param connectionGUID unique identifier of the connection
# @param endpointGUID unique identifier of the endpoint
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections/{{connectionGUID}}/endpoints/{{endpointGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "properties": {
    "class": "ConnectionEndpointProperties",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name detachConnectionEndpoint
# Remove the ConnectToEndpoint relationship between a connection and an endpoint.
#
# @param connectionGUID unique identifier of the connection
# @param endpointGUID unique identifier of the endpoint
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections/{{connectionGUID}}/endpoints/{{endpointGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "cascadedDelete" : false,
  "deleteMethod" : "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name linkEmbeddedConnection
# Create an EmbeddedConnection relationship between a virtual connection and an embedded connection.
#
# @param connectionGUID unique identifier of the virtual connection
# @param embeddedConnectionGUID unique identifier of the embedded connection
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections/{{connectionGUID}}/embedded-connections/{{embeddedConnectionGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "properties": {
    "class": "EmbeddedConnectionProperties",
    "position": 0,
    "displayName" : "Add name here",
    "arguments" : {
      "argument1" : "argument1Value",
      "argument2" : "argument2Value"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name detachEmbeddedConnection
# Remove an EmbeddedConnection relationship between a virtual connection and an embedded connection.
#
# @param connectionGUID unique identifier of the virtual connection
# @param embeddedConnectionGUID unique identifier of the embedded connection
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections/{{connectionGUID}}/embedded-connections/{{embeddedConnectionGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelaitonshipRequestBody",
  "cascadedDelete" : false,
  "deleteMethod" : "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name linkAssetToConnection
# Attach an asset to a connection.
#
# @param assetGUID       unique identifier of the asset
# @param connectionGUID            unique identifier of the connection
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/assets/{{assetGUID}}/connections/{{connectionGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "properties": {
    "class": "AssetConnectionProperties",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# @name detachAssetFromConnection
# Detach an asset from a connection.
#
# @param assetGUID       unique identifier of the asset
# @param connectionGUID            unique identifier of the connection
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/assets/{{assetGUID}}/connections/{{connectionGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "cascadedDelete" : false,
  "deleteMethod" : "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name linkEndpointToITAsset
# Attach an endpoint to an infrastructure asset.
#
# @param assetGUID             unique identifier of the infrastructure asset
# @param endpointGUID            unique identifier of the endpoint
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/assets/{{assetGUID}}/endpoints/{{endpointGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "properties": {
    "class": "ServerEndpointProperties",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name detachEndpointFromITAsset
# Detach an endpoint from an infrastructure asset.
#
# @param teamGUID               unique identifier of the team
# @param personRoleGUID         unique identifier of the associated person role
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/assets/{{assetGUID}}/endpoints/{{endpointGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "deleteMethod" : "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name deleteConnection
# Delete a connection.
#
# @param connectionGUID  unique identifier of the element to delete
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections/{{connectionGUID}}/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteElementRequestBody",
  "cascadedDelete" : false,
  "deleteMethod" : "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name getConnectionsByName
# Returns the list of connections with a particular name.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections/by-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "filter" : "Add name here",
  "startFrom": 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name findConnections
# Retrieve the list of connection metadata elements that contain the search string.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString": "xxx",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 0,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name getConnectionByGUID
# Return the properties of a specific connection.
#
# @param connectionGUID    unique identifier of the required element
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connections/{{connectionGUID}}/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "GetRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# =====================================================================================================================
# Work with Connector Types
# https://egeria-project.org/concepts/connector-type

###
# @name createConnectorType
# Create a connectorType.
#
# Request body provides             properties for the connectorType.
#
# Returns unique identifier of the newly created element
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connector-types
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "properties": {
    "class" : "ConnectorTypeProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "displayName":"add name here",
    "description": "add description here",
    "connectorProviderClassName": "add name here",
    "supportedAssetType": "add type name here",
    "supportedDeployedImplementationType": "add type name here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name createConnectorTypeFromTemplate
# Create a new metadata element to represent a connectorType using an existing metadata element as a template.
# The template defines additional classifications and relationships that should be added to the new element.
#
# Request body provides properties that override the template
#
# Returns unique identifier of the new metadata element
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connector-types/from-template
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "TemplateRequestBody",
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "RelationshipElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "templateGUID": "add guid here",
  "replacementProperties": {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "placeholderPropertyValues":  {
    "placeholder1" : "propertyValue1",
    "placeholder2" : "propertyValue2"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name updateConnectorType
# Update the properties of a connectorType.
#
# @param connectorTypeGUID unique identifier of the connectorType (returned from create)
# Request body provides     properties for the new element.
#
# Returns void or
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connector-types/update
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "mergeUpdate" : true,
  "properties": {
    "class" : "ConnectorTypeProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "displayName":"add name here",
    "description": "add description here",
    "connectorProviderClassName": "add name here",
    "supportedAssetType": "add type name here",
    "supportedDeployedImplementationType": "add type name here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name deleteConnectorType
# Delete a connectorType.
#
# @param connectorTypeGUID  unique identifier of the element to delete
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connector-types/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteElementRequestBody",
  "cascadedDelete" : false,
  "deleteMethod" : "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name getConnectorTypesByName
# Returns the list of connectorTypes with a particular name.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connector-types/by-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "filter" : "Add name here",
  "startFrom": 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name findConnectorTypes
# Retrieve the list of connectorType metadata elements that contain the search string.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connector-types/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString": "xxx",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 0,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name getConnectorTypeByGUID
# Return the properties of a specific connectorType.
#
# @param connectorTypeGUID    unique identifier of the required element
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/connector-types/{{connectorTypeGUID}}/retrieve"})
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "GetRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###
# =====================================================================================================================
# Work with Endpoints
# https://egeria-project.org/concepts/endpoint

###
# @name createEndpoint
# Create an endpoint.
#
# Request body provides             properties for the endpoint.
#
# Returns unique identifier of the newly created element
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/endpoints
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "RelationshipElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "properties": {
    "class" : "EndpointProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "displayName":"add name here",
    "description": "add description here",
    "networkAddress": "add address here",
    "protocol": "add protocol here",
    "encryptionMethod": "add method here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name createEndpointFromTemplate
# Create a new metadata element to represent an endpoint using an existing metadata element as a template.
# The template defines additional classifications and relationships that should be added to the new element.
#
# Request body provides properties that override the template
#
# Returns unique identifier of the new metadata element
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/endpoints/from-template
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "TemplateRequestBody",
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "RelationshipElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "templateGUID": "add guid here",
  "replacementProperties": {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "placeholderPropertyValues":  {
    "placeholder1" : "propertyValue1",
    "placeholder2" : "propertyValue2"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name updateEndpoint
# Update the properties of an endpoint.
#
# @param endpointGUID unique identifier of the endpoint (returned from create)
# Request body provides     properties for the new element.
#
# Returns void or
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/endpoints/{{endpointGUID}}/update
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "mergeUpdate" : true,
  "properties": {
    "class" : "EndpointProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "displayName":"add name here",
    "description": "add description here",
    "networkAddress": "add address here",
    "protocol": "add protocol here",
    "encryptionMethod": "add method here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name deleteEndpoint
# Delete an endpoint.
#
# @param endpointGUID  unique identifier of the element to delete
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/endpoints/{{endpointGUID}}/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteElementRequestBody",
  "cascadedDelete" : false,
  "deleteMethod" : "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name getEndpointsByName
# Returns the list of endpoints with a particular name.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/endpoints/by-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "filter" : "Add name here",
  "startFrom": 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}

###
# @name getEndpointsByNetworkAddress
# Retrieve the list of endpoint metadata elements with a matching networkAddress.
# There are no wildcards supported on this request.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/endpoints/by-network-address
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "filter" : "Add name here",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name getEndpointsForAsset
# Retrieve the list of endpoint metadata elements that are attached to a specific infrastructure element.
#
# @param assetGUID element to search for
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/assets/{{assetGUID}}/endpoints/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "filter" : "Add name here",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name findEndpoints
# Retrieve the list of endpoint metadata elements that contain the search string.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/endpoints/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString": "xxx",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 0,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name getEndpointByGUID
# Return the properties of a specific endpoint.
#
# @param endpointGUID    unique identifier of the required element
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/connection-maker/endpoints/{{endpointGUID}}/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "GetRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}
