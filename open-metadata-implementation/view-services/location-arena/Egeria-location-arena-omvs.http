# Egeria-location-arena-view-service

@baseURL=https://localhost:9443
@viewServer=view-server

###
# =====================================================================================================================
# Manage the authentication token.  Run this request to create/refresh the token.

# @name Token (RequestBody)
POST {{baseURL}}/api/token
Content-Type: application/json

{
  "userId" : "peterprofile",
  "password" : "secret"
}

> {% client.global.set("token", response.body); %}



###
# =====================================================================================================================
# Work with Locations
# https://egeria-project.org/concepts/location

@locationGUID=add guid here


###
# @name createLocation
# Create a location.
#
# Request body provides             properties for the location.
#
# Returns unique identifier of the newly created element
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/locations
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewElementRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "RelationshipElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "properties": {
    "class" : "LocationProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "displayName": "add short name here",
    "description": "add description here",
    "category": "add category here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name createLocationFromTemplate
# Create a new metadata element to represent a location using an existing metadata element as a template.
# The template defines additional classifications and relationships that should be added to the new element.
#
# Request body provides properties that override the template
#
# Returns unique identifier of the new metadata element
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/locations/from-template
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "TemplateRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "anchorGUID" : "add guid here",
  "isOwnAnchor": false,
  "parentGUID": "add guid here",
  "parentRelationshipTypeName": "add type name here",
  "parentRelationshipProperties": {
    "class": "RelationshipElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "parentAtEnd1": false,
  "templateGUID": "add guid here",
  "replacementProperties": {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "placeholderPropertyValues":  {
    "placeholder1" : "propertyValue1",
    "placeholder2" : "propertyValue2"
  }
}


###
# @name updateLocation
# Update the properties of a location.
#
# @param locationGUID unique identifier of the location (returned from create)
# Request body provides     properties for the new element.
#
# Returns void or
#  InvalidParameterException  one of the parameters is invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/locations/{{locationGUID}}/update
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateElementRequestBody",
  "mergeUpdate": true,
  "properties": {
    "class" : "LocationProperties",
    "typeName" : "enter the type of the element",
    "qualifiedName": "add unique name here",
    "displayName": "add short name here",
    "description": "add description here",
    "category": "add category here",
    "additionalProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "extendedProperties": {
      "property1" : "propertyValue1",
      "property2" : "propertyValue2"
    },
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  },
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@locationOneGUID=add guid here
@locationTwoGUID=add guid here

###
# @name linkPeerLocation
# Attach a location to one of its peers.
#
# @param locationOneGUID           unique identifier of the first location
# @param locationTwoGUID       unique identifier of the second location
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/locations/{{locationOneGUID}}/adjacent-locations/{{locationTwoGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "AdjacentLocationProperties",
    "label": "",
    "description": "",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name detachPeerLocations
# Detach a location from a location.
#
# @param locationOneGUID       unique identifier of the first location
# @param locationTwoGUID           unique identifier of the second location
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/locations/{{locationOneGUID}}/adjacent-locations/{{locationTwoGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "deleteMethod": "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@nestedLocationGUID=add guid here

###
# @name linkNestedLocation
# Attach a super location to a nested location.
#
# @param locationGUID           unique identifier of the super location
# @param nestedLocationGUID       unique identifier of the nested location
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/locations/{{locationGUID}}/nested-locations/{{nestedLocationGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "NestedLocationProperties",
    "label": "",
    "description": "",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name detachNestedLocation
# Detach a super location from a nested location.
#
# @param locationGUID       unique identifier of the super location
# @param nestedLocationGUID           unique identifier of the nested location
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/locations/{{locationGUID}}/nested-locations/{{nestedLocationGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "deleteMethod": "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@elementGUID=add guid here

###
# @name linkKnownLocation
# Attach an element to its location.
#
# @param elementGUID       unique identifier of the element
# @param locationGUID            unique identifier of the location
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/elements/{{elementGUID}}/known-locations/{{locationGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "KnownLocationProperties",
    "label": "",
    "description": "",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}

###
# @name detachKnownLocation
# Detach an element from its location.
#
# @param elementGUID       unique identifier of the element
# @param locationGUID            unique identifier of the location
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/elements/{{elementGUID}}/known-locations/{{locationGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "deleteMethod": "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name deleteLocation
# Delete a location.
#
# @param locationGUID  unique identifier of the element to delete
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/locations/{{locationGUID}}/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteElementRequestBody",
  "cascadeDelete" : false,
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


###
# @name getLocationsByName
# Returns the list of locations with a particular name.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/locations/by-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "filter" : "Add name here",
  "startFrom": 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name findLocations
# Retrieve the list of location metadata elements that contain the search string.
#
# Request body provides string to find in the properties
#
# Returns list of matching metadata elements or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/locations/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString" : "Add value here",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}


###
# @name getLocationByGUID
# Return the properties of a specific location.
#
# @param locationGUID    unique identifier of the required element
# Request body provides options to control the query
#
# Returns element or
#  InvalidParameterException  one of the parameters is invalid
#  UserNotAuthorizedException the user is not authorized to issue this request
#  PropertyServerException    there is a problem reported in the open metadata server(s)
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/location-arena/locations/{{locationGUID}}/retrieve
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "GetRequestBody",
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}


