# Egeria-people-organizer-view-service

@baseURL=https://localhost:9443
@viewServer=view-server

###
# =====================================================================================================================
# Manage the authentication token.  Run this request to create/refresh the token.

# @name Token (RequestBody)
POST {{baseURL}}/api/token
Content-Type: application/json

{
  "userId" : "peterprofile",
  "password" : "secret"
}

> {% client.global.set("token", response.body); %}


###

@personOneGUID=add guid here
@personTwoGUID=add guid here

###
# @name linkPeerPerson
# Attach a person profile to one of its peers.
#
# @param personOneGUID          unique identifier of the first person profile
# @param personTwoGUID          unique identifier of the second person profile
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/people-organizer/actor-profiles/{{personOneGUID}}/peer-persons/{{personTwoGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "RelationshipProperties",
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name detachSupportingDefinition
# Detach a person profile from one of its peers.
#
# @param personOneGUID          unique identifier of the first person profile
# @param personTwoGUID          unique identifier of the second person profile
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/people-organizer/actor-profiles/{{personOneGUID}}/peer-persons/{{personTwoGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "deleteMethod": "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###

@superTeamGUID=add guid here
@subteamGUID=add guid here

###
# @name linkTeamStructure
# Attach a super team to a subteam.
#
# @param superTeamGUID          unique identifier of the super team
# @param subteamGUID            unique identifier of the subteam
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/people-organizer/actor-profiles/{{superTeamGUID}}/team-structures/{{subteamGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "properties": {
    "class": "TeamStructureProperties",
    "delegationEscalationAuthority": true,
    "effectiveFrom": "{{$isoTimestamp}}",
    "effectiveTo": "{{$isoTimestamp}}"
  }
}


###
# @name detachTeamStructure
# Detach a super team from a subteam.
#
# @param superTeamGUID          unique identifier of the super team
# @param subteamGUID            unique identifier of the subteam
# Request body provides  description of the relationship.
#
# Returns void or
#  InvalidParameterException  one of the parameters is null or invalid.
#  PropertyServerException    there is a problem retrieving information from the property server(s).
#  UserNotAuthorizedException the requesting user is not authorized to issue this request.
#
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/people-organizer/actor-profiles/{{superTeamGUID}}/team-structures/{{subteamGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody",
  "deleteMethod": "LOOK_FOR_LINEAGE",
  "externalSourceGUID": "add guid here",
  "externalSourceName": "add qualified name here",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false
}

###




