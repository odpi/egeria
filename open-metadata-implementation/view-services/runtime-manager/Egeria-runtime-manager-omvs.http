# Egeria-runtime-manager-view-service

@baseURL=https://localhost:9443
@viewServer=view-server

###
# =====================================================================================================================
# Manage the authentication token.  Run this request to create/refresh the token.

# @name Token (RequestBody)
POST {{baseURL}}/api/token
Content-Type: application/json

{
  "userId" : "garygeeke",
  "password" : "secret"
}

> {% client.global.set("token", response.body); %}


###
# =====================================================================================================================
# Work with platforms.
# https://egeria-project.org/types/0037-Software-Server-Platforms/

@platformGUID=44bf319f-1e41-4da1-b771-2753b92b631a

###
# @name getPlatformsByName
# Returns the list of platforms with a particular name. The name is specified in the filter.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/platforms/by-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : "Default Local OMAG Server Platform"
}


###
# @name getPlatformsByDeployedImplementationType
# Returns the list of platforms with a particular deployed implementation type.  The value is specified in the filter.
# If it is null, or no request body is supplied, all platforms are returned.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/platforms/by-deployed-implementation-type
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : "Add name here"
}



###
# @name getPlatformTemplatesByDeployedImplementationType
# Returns the list of templates for platforms with a particular deployed implementation type.  The value is specified in the filter.
# If it is null, or no request body is supplied, all platform templates are returned.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/platforms/by-deployed-implementation-type?startFrom=0&pageSize=10&getTemplates=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : "Add name here"
}


###
# @name getPlatformsByDeployedImplementationType (OMAG Server Platform)
# Returns the list of platforms with a particular deployed implementation type.  The value is specified in the filter.
# If it is null, or no request body is supplied, all platforms are returned.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/platforms/by-deployed-implementation-type?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : "OMAG Server Platform"
}


###
# @name getPlatformByGUID
# Returns details about the platform's catalog entry (asset).
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/platforms/{{platformGUID}}
Authorization: Bearer {{token}}
Content-Type: application/json

###
# @name getPlatformReport
# Returns details about the running platform.

GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/platforms/{{platformGUID}}/report
Authorization: Bearer {{token}}
Content-Type: application/json


###
# =====================================================================================================================
# Work with servers.
# https://egeria-project.org/types/00040-Software-Servers/

@serverGUID=add guid here

###
# @name getServersByName
# Returns the list of servers with a particular name.  The name is specified in the filter.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/software-servers/by-name?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : ""
}


###
# @name getServersByDeployedImplementationType
# Returns the list of servers with a particular deployed implementation type.   The value is specified in the filter.
# If it is null, or no request body is supplied, all servers are returned.

 POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/software-servers/by-deployed-implementation-type?startFrom=0&pageSize=10
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : "Unity Catalog Server"
}


###
# @name getServerTemplatesByDeployedImplementationType
# Returns the list of templates for servers with a particular deployed implementation type.   The value is specified in the filter.
# If it is null, or no request body is supplied, all server templates are returned.

 POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/software-servers/by-deployed-implementation-type?startFrom=0&pageSize=10&getTemplates=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : ""
}


###
# @name getServerByGUID
# Returns details about the server's catalog entry (asset).

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/software-servers/{{serverGUID}}
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name getOMAGServerReport
# Returns details about the running OMAG server.
# https://egeria-project.org/concepts/omag-server/
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/omag-servers/{{serverGUID}}/instance/report
Authorization: Bearer {{token}}
Content-Type: application/json

###
# ========================================================================================
# Activate and deactivate the OMAG Servers
#

###
# @name activateWithStoredConfig
# Activate the Open Metadata and Governance (OMAG) server using the configuration document stored for this server.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/omag-servers/{{serverGUID}}/instance
Authorization: Bearer {{token}}
Content-Type: application/json

###
# @name shutdownServer
# Temporarily shutdown the named OMAG server.  This server can be restarted as a later time.

DELETE {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/omag-servers/{{serverGUID}}/instance
Authorization: Bearer {{token}}
Content-Type: application/json

###
# @name shutdownAndUnregisterServer
# Shutdown the named OMAG server.  The server will also be removed from any open metadata repository cohorts it has registered with.

DELETE {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/omag-servers/{{serverGUID}}/instance
Authorization: Bearer {{token}}
Content-Type: application/json

###
# ========================================================================================
# Integration Daemon Servers

@connectorName=add name here
@integrationGroupName=add name here

###
# @name getConfigurationProperties
# Retrieve the configuration properties of the named integration connector running in the integration daemon.
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/integration-daemons/{{serverGUID}}/integration-connectors/{{connectorName}}/configuration-properties
Authorization: Bearer {{token}}

###
# @name updateConfigurationProperties
# Update the configuration properties of the integration connectors, or specific integration connector if a connector name is supplied.  This update is in memory and will not persist over a server restart.
# mergeUpdate indicates whether properties should be over-written or completely replace existing properties.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/integration-daemons/{{serverGUID}}/integration-connectors/configuration-properties
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "ConnectorConfigPropertiesRequestBody",
  "connectorName" : "{{connectorName}}",
  "mergeUpdate" : false,
  "configurationProperties" : {
     "propertyName1" : "propertyValue1",
     "propertyName2" : "propertyValue2"
  }
}

###
# @name updateEndpointNetworkAddress
# Update the endpoint network address for a specific integration connector.  This update is in memory and will not persist over a server restart.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/integration-daemons/{{serverGUID}}/integration-connectors/{{connectorName}}/endpoint-network-address
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "StringRequestBody",
  "string" : "add new address here"
}


###
# @name updateConnectorConnection
# Update the connection for a specific integration connector.  This update is in memory and will not persist over a server restart.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/integration-daemons/{{serverGUID}}/integration-connectors/{{connectorName}}/connection
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "Connection"
}


###
# @name refreshConnectors
# Issue a refresh() request on all connectors running in the integration daemon, or a specific connector if the connector name is specified.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/integration-daemons/{{serverGUID}}/integration-connectors/refresh
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NameRequestBody",
  "name" : "add optional name here"
}


###
# @name refreshIntegrationGroupConfig
# Request that the integration group refresh its configuration by calling the metadata access server. " +
# Changes to the connector configuration will result in the affected connectors being restarted. " +
# This request is useful if the metadata access server has an outage, particularly while the " +
# integration daemon is initializing.  This request just ensures that the latest configuration " +
# is in use. See https://egeria-project.org/concepts/integration-group/
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/integration-daemons/{{serverGUID}}/integration-groups/{{integrationGroupName}}/refresh-config
Authorization: Bearer {{token}}



###
# @name publishOpenLineageEvent
# Pass an open lineage event to the integration daemon.  The event is the request body.  It will pass it on to the
# integration connectors that have registered a listener for open lineage events.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/integration-daemons/{{serverGUID}}/open-lineage-events/publish
Authorization: Bearer {{token}}
Content-Type: application/json

{
}


###
# ========================================================================================
# Engine Host

@governanceEngineName=add name here

###
# @name refreshConfig
# Request that the governance engine refresh its configuration by calling the metadata server.
# This request is useful if the metadata server has an outage, particularly while the
# governance server is initializing.  This request just ensures that the latest configuration
# is in use. See https://egeria-project.org/concepts/governance-engine-definition/
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/engine-hosts/{{serverGUID}}/governance-engines/{{governanceEngineName}}/refresh-config
Authorization: Bearer {{token}}


###
# @name refreshConfig
# Request that all governance engines refresh their configuration by calling the metadata server.
# This request is useful if the metadata server has an outage, particularly while the
# governance server is initializing.  This request just ensures that the latest configuration
# is in use. See https://egeria-project.org/concepts/governance-engine-definition/
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/engine-hosts/{{serverGUID}}/governance-engines/refresh-config
Authorization: Bearer {{token}}

###
# ========================================================================================
# Metadata Access Servers



###
#==================================================
# Load Archives
#==================================================

###
# @name get the GUID for active-metadata-store
# Retrieve the metadata element using its unique identifier.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/metadata-elements/guid-by-unique-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UniqueNameRequestBody",
  "name" : "active-metadata-store",
  "namePropertyName" : "displayName"
}

> {% client.global.set("activeMetadataStoreGUID", response.body.guid); %}


###
# @name addOpenMetadataArchiveFile (into active-metadata-store)
# Add a new open metadata archive to running OMAG Server's repository.
# An open metadata archive contains metadata types and instances.  This operation loads an open metadata archive
# that is stored in the namrd file.  It can be used with OMAG servers that are of type Open Metadata Store.
# https://egeria-project.org/concepts/open-metadata-archives/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/omag-servers/{{activeMetadataStoreGUID}}/instance/load/open-metadata-archives/file
Authorization: Bearer {{token}}
Content-Type: text/plain

content-packs/CocoComboArchive.omarchive


###
# @name addOpenMetadataArchiveFile
# Add a new open metadata archive to running OMAG Server's repository.
# An open metadata archive contains metadata types and instances.  This operation loads an open metadata archive
# that is stored in the namrd file.  It can be used with OMAG servers that are of type Open Metadata Store.
# https://egeria-project.org/concepts/open-metadata-archives/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/omag-servers/{{serverGUID}}/instance/load/open-metadata-archives/file
Authorization: Bearer {{token}}
Content-Type: text/plain

content-packs/CocoComboArchive.omarchive

###
# @name addOpenMetadataArchiveContent
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/omag-servers/{{serverGUID}}/instance/load/open-metadata-archives/archive-content
Authorization: Bearer {{token}}
Content-Type: application/json

{
}

###

@cohortName=add name here

###
# @name connectToCohort
# A new server needs to register the metadataCollectionId for its metadata repository with the other servers in the
# open metadata repository.  It only needs to do this once and uses a timestamp to record that the registration
# event has been sent.
# If the server has already registered in the past, it sends a reregistration request.
# See https://egeria-project.org/concepts/cohort-member/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/cohort-members/{{serverGUID}}/cohorts/{{cohortName}}/connect
Authorization: Bearer {{token}}


###
# @name disconnectFromCohort
# Disconnect communications from a specific cohort.
# See https://egeria-project.org/concepts/cohort-member/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/cohort-members/{{serverGUID}}/cohorts/{{cohortName}}/disconnect
Authorization: Bearer {{token}}


###
# @name unregisterFromCohort
# Unregister from a specific cohort and disconnect from cohort communications.
# See https://egeria-project.org/concepts/cohort-member/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/runtime-manager/cohort-members/{{serverGUID}}/cohorts/{{cohortName}}/unregister
Authorization: Bearer {{token}}

