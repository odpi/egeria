# Egeria-project-manager-view-service

@baseURL=https://localhost:9443
@viewServer=view-server

###
# =====================================================================================================================
# Manage the authentication token.  Run this request to create/refresh the token.

# @name Token (RequestBody)
POST {{baseURL}}/api/token
Content-Type: application/json

{
  "userId" : "peterprofile",
  "password" : "secret"
}

> {% client.global.set("token", response.body); %}

###
# =====================================================================================================================
# Retrieving Projects: https://egeria-project.org/concepts/project
#

@parentGUID=xxx

###
# @name getLinkedProjects
# Returns the list of projects that are linked off of the supplied element.  Any relationship will do.
# The request body is optional, but if supplied acts as a filter on project status.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/metadata-elements/{{parentGUID}}/projects?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : ""
}


###
# @name getClassifiedProjects
# Returns the list of projects with a particular classification.  The name of the classification is supplied in the request body.
# Examples of these classifications include "StudyProject", "PersonalProject", "Campaign" or "Task".
# There is also "GlossaryProject" and "GovernanceProject".
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects/by-classifications?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : ""
}

###
# @name getProjectTeam
# Returns the list of actors that are linked off of the project.  This includes the project managers.
# The optional request body allows a teamRole to be specified as a filter.  To filter out the project managers,
# specify "ProjectManagement" as the team role.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects/{{projectGUID}}/team?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "filter" : ""
}

###
# @name findProjects
# Returns the list of projects matching the search string.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects/by-search-string
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "SearchStringRequestBody",
  "searchString" : "Add value here",
  "startsWith" : false,
  "endsWith" : false,
  "ignoreCase" : true,
  "startFrom" : 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}

###
# @name getProjectsByName
# Returns the list of projects with a particular name.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects/projects/by-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "FilterRequestBody",
  "filter" : "Add name here",
  "startFrom": 0,
  "pageSize": 10,
  "asOfTime" : "{{$isoTimestamp}}",
  "effectiveTime" : "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "limitResultsByStatus" : ["ACTIVE"],
  "sequencingOrder" : "PROPERTY_ASCENDING",
  "sequencingProperty" : "qualifiedName"
}

###

@projectGUID=xxx

###
# @name getProjectByGUID
# Return the properties of a specific project.
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects/{{projectGUID}}
Authorization: Bearer {{token}}

###
# @name getProjectGraph
# Returns the graph of related projects and resources starting with a supplied project guid..
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects/{{projectGUID}}/graph
Authorization: Bearer {{token}}

###
# =====================================================================================================================
# Create Projects: https://egeria-project.org/concepts/project
# These requests use the following parameters:
#
# anchorGUID - the unique identifier of the element that should be the anchor for the new project. Set to null if no anchor,
# or if this project is to be its own anchor.
#
# isOwnAnchor -this element should be classified as its own anchor or not.  The default is false.
#
# parentGUID - the optional unique identifier for an element that should be connected to the newly created element.
# If this property is specified, parentRelationshipTypeName must also be specified
#
# parentRelationshipTypeName - the name of the relationship, if any, that should be established between the new
# project and the parent element.  An example could be "ResourceList".
#
# parentAtEnd1 -identifies which end any parent entity sits on the relationship.
#

###
# @name createProject
# Create a new generic project.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "projectProperties": {
    "class" : "ProjectProperties",
    "qualifiedName": "Must provide a unique name here",
    "identifier" : "Add business identifier",
    "name" : "Add display name here",
    "description" : "Add description of the project here",
    "projectPhase" : "lifecycle phase of the project",
    "projectStatus": "Add appropriate valid value for type",
    "projectHealth" : "Add how well the project is tracking to plan",
    "priority" : 0,
    "startDate" : "date/time",
    "plannedEndDate" : "date/time"
  }
}

###

@classificationName="PersonalProject"

###
# @name createClassifiedProject
# Create a new project with a specific classification.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects?classificationName={{classificationName}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "projectProperties": {
    "class" : "ProjectProperties",
    "qualifiedName": "Must provide a unique name here",
    "identifier" : "Add business identifier",
    "name" : "Add display name here",
    "description" : "Add description of the project here",
    "projectPhase" : "lifecycle phase of the project",
    "projectStatus": "Add appropriate valid value for type",
    "projectHealth" : "Add how well the project is tracking to plan",
    "priority" : 0,
    "startDate" : "date/time",
    "plannedEndDate" : "date/time"
  }
}

###
# @name createCampaign
# Create a new project with the Campaign classification.  Used to identify the top of a project hierarchy.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects?classificationName=Campaign
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "anchorGUID" : "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor" : false,
  "parentGUID" : "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName" : "open metadata type name",
  "parentAtEnd1": true,
  "projectProperties": {
    "class" : "ProjectProperties",
    "qualifiedName": "Must provide a unique name here",
    "identifier" : "Add business identifier",
    "name" : "Add display name here",
    "description" : "Add description of the project here",
    "projectPhase" : "lifecycle phase of the project",
    "projectStatus": "Add appropriate valid value for type",
    "projectHealth" : "Add how well the project is tracking to plan",
    "priority" : 0,
    "startDate" : "date/time",
    "plannedEndDate" : "date/time"
  }
}


###
# @name createTaskForProject
# Create a new project with the Task classificationand link it to a project.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects/{{projectGUID}}/task
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "ProjectProperties",
  "qualifiedName": "Must provide a unique name here",
  "identifier" : "Add business identifier",
  "name" : "Add display name here",
  "description" : "Add description of the task here",
  "projectPhase" : "lifecycle phase of the task",
  "projectStatus": "Add appropriate valid value for type",
  "projectHealth" : "Add how well the task is tracking to plan",
  "priority" : 0,
  "startDate" : "date/time",
  "plannedEndDate" : "date/time"
}

###
# @name createProjectFromTemplate
# Create a new metadata element to represent a project using an existing metadata element as a template.
# The template defines additional classifications and relationships that should be added to the new project.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects/from-template
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class": "TemplateRequestBody",
  "anchorGUID": "anchor GUID, if set then isOwnAnchor=false",
  "isOwnAnchor": false,
  "parentGUID": "parent GUID, if set, set all parameters beginning 'parent'",
  "parentRelationshipTypeName": "open metadata type name",
  "parentAtEnd1": true,
  "templateGUID": "template GUID",
  "replacementProperties": {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "propertyName" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveTypeCategory" : "OM_PRIMITIVE_TYPE_STRING",
        "primitiveValue" : "value of property"
      }
    }
  },
  "placeholderPropertyValues" : {
    "placeholderProperty1Name" : "property1Value",
    "placeholderProperty2Name" : "property2Value"
  }
}

###
# @name updateProject
# Update the properties of a project.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects/{{projectGUID}}/update
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "ProjectProperties",
  "qualifiedName": "Must provide a unique name here",
  "identifier" : "Add business identifier",
  "name" : "Add display name here",
  "description" : "Add description of the project here",
  "projectPhase" : "lifecycle phase of the project",
  "projectStatus": "Add appropriate valid value for type",
  "projectHealth" : "Add how well the project is tracking to plan",
  "priority" : 0,
  "startDate" : "date/time",
  "plannedEndDate" : "date/time"
}


###
# @name deleteProject
# Delete a project.  It is detected from all parent elements.  If members are anchored to the project
# then they are also deleted.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects/{{projectGUID}}/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteElementRequestBody"
}

###

@actorGUID="guid that is to be a member of the project"

###
# @name addToProjectTeam
# Add an actor to a project. The request body is optional.  If supplied, it contain the name of the role that the actor
# plays in the project.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects/{{projectGUID}}/members/{{actorGUID}}/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelationshipRequestBody",
  "properties" : {
    "class": "AssignmentScopeProperties",
    "assignmentType": "xxx",
    "description": "xxx"
  }
}


###
# @name removeFromProjectTeam
# Remove an actor from a project.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/project-manager/projects/{{projectGUID}}/members/{{actorGUID}}/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "DeleteRelationshipRequestBody"
}


###
