# Egeria-automated-curation-view-service

@baseURL=https://localhost:9443
@viewServer=view-server

###
# =====================================================================================================================
# Managed the authentication token.  Run this request to create/refresh the token.

# @name Token (RequestBody)
POST {{baseURL}}/api/token
Content-Type: application/json

{
  "userId" : "peterprofile",
  "password" : "secret"
}

> {% client.global.set("token", response.body); %}

###
# The technology types provide the reference data to guide the curator.  They are extracted from the valid
# values for deployedImplementationType
#

###
# @name getAllTechnologyTypes
# Retrieve the list of all deployed implementation type metadata elements.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/technology-types/by-search-string?startFrom=0&pageSize=0&startsWith=false&endsWith=false&ignoreCase=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "string" : ""
}

###
@typeName=SoftwareServer

###
# @name getTechnologyTypesForOpenMetadataType
# Retrieve the list of deployed implementation type metadata elements linked to a particular open metadata type.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/open-metadata-types/{{typeName}}/technology-types?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name findTechnologyTypes
# Retrieve the list of deployed implementation type metadata elements that contain the search string.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/technology-types/by-search-string?startFrom=0&pageSize=0&startsWith=false&endsWith=false&ignoreCase=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "string" : "PostgreSQL"
}


###
# @name getTechnologyTypeDetail
# Retrieve the requested deployed implementation type metadata element. There are no wildcards allowed in the name.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/technology-types/by-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "string" : "PostgreSQL Server"
}

###
# =====================================================================================================================
# Catalog templates make it easy to create new complex object such as assets.
#


###
# @name createElementFromTemplate
# Create a new element from a template.
# Further Information: https://egeria-project.org/features/templated-cataloguing/overview/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/catalog-templates/new-element
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "templateGUID" : "add guid here",
   "isOwnAnchor" : true,
   "placeholderPropertyValues" : {
       "placeholderPropertyName1" : "placeholderPropertyValue1",
       "placeholderPropertyName2" : "placeholderPropertyValue2"
   }
}

###
# Full body
# {
#   "typeName" : "",
#   "initialStatus" : "",
#   "initialClassifications" : "",
#   "anchorGUID" : "",
#   "isOwnAnchor" : "",
#   "effectiveFrom" : "",
#   "effectiveTo" : "",
#   "templateGUID" : "",
#   "templateProperties" : {},
#   "placeholderPropertyValues" : {
#     "placeholderPropertyName1" : "placeholderPropertyValue1",
#     "placeholderPropertyName2" : "placeholderPropertyValue2"
#   },
#   "parentGUID" : "",
#   "parentRelationshipTypeName" : "",
#   "parentRelationshipProperties" : "",
#   "parentAtEnd1" : "",
#   "effectiveTime" : ""
# }

###
# @name createElementFromTemplate (Apache Kafka Server)
# Create a new element from a template.
# Further Information: https://egeria-project.org/features/templated-cataloguing/overview/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/catalog-templates/new-element
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "templateGUID" : "5e1ff810-5418-43f7-b7c4-e6e062f9aff7",
  "isOwnAnchor" : true,
  "placeholderPropertyValues" : {
    "serverName" : "localKafka2",
    "hostIdentifier" : "localhost",
    "portNumber" : "9092"
  }
}

###
# @name createElementFromTemplate (PostgreSQL Server)
# Create a new element from a template.
# Further Information: https://egeria-project.org/features/templated-cataloguing/overview/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/catalog-templates/new-element
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "templateGUID" : "542134e6-b9ce-4dce-8aef-22e8daf34fdb",
  "isOwnAnchor" : true,
  "placeholderPropertyValues" : {
    "serverName" : "DemoPostgreSQL1",
    "hostIdentifier" : "egeria.pdr-associates.com",
    "portNumber" : "5432",
    "databaseUserId" : "surveyor",
    "databasePassword" : "secret"
  }
}

###
# =====================================================================================================================
# A catalog target links an element (typically an asset) to an integration connector for processing.
#

@integrationConnectorGUID=fa1f711c-0b34-4b57-8e6e-16162b132b0c
@metadataElementGUID=c38bbb0a-ba01-41d3-acfa-075c56a5b405

###
# @name addCatalogTarget
# Add a catalog target to an integration connector.
# Further Information: https://egeria-project.org/concepts/integration-connector/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/integration-connectors/{{integrationConnectorGUID}}/catalog-targets/{{metadataElementGUID}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
    "catalogTargetName" : "Freddy"
}

###
# Full body
#{
#    "catalogTargetName" : "",
#    "metadataSourceQualifiedName" : "",
#    "configurationProperties" : {
#        "propertyName1" : "propertyValue1",
#        "propertyName2" : "propertyValue2"
#    }
#}

###
# @name getCatalogTarget
# Retrieve a specific catalog target associated with an integration connector.
# Further Information: https://egeria-project.org/concepts/integration-connector/
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/integration-connectors/{{integrationConnectorGUID}}/catalog-targets/{{metadataElementGUID}}
Authorization: Bearer {{token}}
Content-Type: application/json

###
# @name getCatalogTargets
# Retrieve the details of the metadata elements identified as catalog targets with an integration connector.
# Further Information: https://egeria-project.org/concepts/integration-connector/
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/integration-connectors/{{integrationConnectorGUID}}/catalog-targets?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json


###
# @name removeCatalogTarget
# Unregister a catalog target from the integration connector.
# Further Information: https://egeria-project.org/concepts/integration-connector/
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/integration-connectors/{{integrationConnectorGUID}}/catalog-targets/{{metadataElementGUID}}/remove
Authorization: Bearer {{token}}
Content-Type: application/json

###
# @name findGovernanceActionTypes
# Retrieve the list of governance action type metadata elements that contain the search string.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-action-types/by-search-string?startFrom=0&pageSize=0&startsWith=false&endsWith=false&ignoreCase=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "string" : "add string here"
}


###
# @name getGovernanceActionTypesByName
# Retrieve the list of governance action type metadata elements with a matching qualified or display name.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-action-types/by-name?startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
   "string" : "add string here"
}


###
# @name getGovernanceActionTypeByGUID
# Retrieve the governance action type metadata element with the supplied unique identifier.
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-action-types/{{governanceActionTypeGUID}}
Authorization: Bearer {{token}}


###
# =====================================================================================================================
# A governance action process describes a well-defined series of steps that gets something done.

# This is the unique identifier of the governance action process
@processGUID = guid


###
# @name findGovernanceActionProcesses
# Retrieve the list of governance action process metadata elements that contain the search string.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-action-processes/by-search-string?
    startFrom=0&pageSize=0&startsWith=false&endsWith=false&ignoreCase=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "string" : "add string here"
}


###
# @name getGovernanceActionProcessesByName
# Retrieve the list of governance action process metadata elements with a matching qualified or display name.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-action-processes/by-name?
    startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "string" : "add string here"
}


###
# @name getGovernanceActionProcessByGUID
# Retrieve the governance action process metadata element with the supplied unique identifier.
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-action-processes/{{processGUID}}
Authorization: Bearer {{token}}


###
# @name getGovernanceActionProcessGraph
# Retrieve the governance action process metadata element with the supplied unique identifier
# along with the flow definition describing its implementation.
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-action-processes/{{processGUID}}/graph
Authorization: Bearer {{token}}


###
# =====================================================================================================================
# Activating governance actions.

###

@governanceEngineName=AssetSurvey

###
# @name initiateEngineAction
# Create an engine action in the metadata store that will trigger the governance service
# associated with the supplied request type.  The engine action remains to act as a record
# of the actions taken for auditing.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-engines/{{governanceEngineName}}/engine-actions/initiate
Authorization: Bearer {{token}}
Content-Type: application/json

{
    "class" : "InitiateEngineActionRequestBody",
    "qualifiedName" : "EngineAction: .....",
    "domainIdentifier" : 0,
    "displayName" : "",
    "description" : "",
    "requestSourceGUIDs": [ "" ],
    "actionTargets": [
      {
          "class" : "NewActionTarget",
          "actionTargetName" : "",
          "actionTargetGUID" : ""
      } ],
    "receivedGuards": [ "" ],
    "startDate" : "",
    "requestType": "",
    "requestParameters": {
        "parameterName1" : "parameterValue1",
        "parameterName2" : "parameterValue2"
    },
    "processName": "",
    "requestSourceName": "",
    "originatorServiceName": "",
    "originatorEngineName": ""
}


###
# @name initiateGovernanceActionType
# Using the named governance action type as a template, initiate a single engine action.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-action-types/initiate
Authorization: Bearer {{token}}
Content-Type: application/json

{
    "class" : "InitiateGovernanceActionTypeRequestBody",
    "governanceActionTypeQualifiedName": "put qualified name here",
    "actionTargets": [
      {
          "class" : "NewActionTarget",
          "actionTargetName": "target name goes here",
          "actionTargetGUID": "target guid goes here"
      } ]
}

###
# @name initiateGovernanceActionType (folder)
# Using the named governance action type as a template, initiate a single engine action.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-action-types/initiate
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "InitiateGovernanceActionTypeRequestBody",
  "governanceActionTypeQualifiedName": "Egeria:GovernanceActionType:2adeb8f1-0f59-4970-b6f2-6cc25d4d2402survey-folder",
  "actionTargets": [
    {
      "class" : "NewActionTarget",
      "actionTargetName": "folderToSurvey",
      "actionTargetGUID": "c0c71ae5-c115-438f-ac25-8ac297881768"
    } ]
}

###
# @name initiateGovernanceActionType (Kafka Server)
# Using the named governance action type as a template, initiate a single engine action.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-action-types/initiate
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "InitiateGovernanceActionTypeRequestBody",
  "governanceActionTypeQualifiedName": "Egeria:GovernanceActionType:2adeb8f1-0f59-4970-b6f2-6cc25d4d2402survey-kafka-server",
  "actionTargets": [
    {
      "class" : "NewActionTarget",
      "actionTargetName": "serverToSurvey",
      "actionTargetGUID": "c38bbb0a-ba01-41d3-acfa-075c56a5b405"
    } ]
}

###
# @name initiateGovernanceActionType (PostgreSQL Server)
# Using the named governance action type as a template, initiate a single engine action.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-action-types/initiate
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "InitiateGovernanceActionTypeRequestBody",
  "governanceActionTypeQualifiedName": "Egeria:GovernanceActionType:2adeb8f1-0f59-4970-b6f2-6cc25d4d2402survey-postgres-server",
  "actionTargets": [
    {
      "class" : "NewActionTarget",
      "actionTargetName": "serverToSurvey",
      "actionTargetGUID": "c0c71ae5-c115-438f-ac25-8ac297881768"
    } ]
}

###
# Full request body for initiateGovernanceActionType
#{
#    "class" : "InitiateGovernanceActionTypeRequestBody",
#    "governanceActionTypeQualifiedName": "Egeria:GovernanceActionType:2adeb8f1-0f59-4970-b6f2-6cc25d4d2402survey-folder",
#    "requestParameters": {
#        "parameterName1" : "parameterValue1",
#        "parameterName2" : "parameterValue2"
#    },
#    "requestSourceGUIDs": [ "" ],
#    "actionTargets": [
#      {
#          "class" : "NewActionTarget",
#          "actionTargetName": "folderToSurvey",
#          "actionTargetGUID": "ec35133e-bff9-4a2f-9ff1-18fda8c81396"
#      } ],
#    "startDate": "",
#    "originatorServiceName": "",
#    "originatorEngineName": ""
#}

###
# @name initiateGovernanceActionProcess
# Using the named governance action process as a template, initiate a chain of engine actions.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/governance-action-processes/initiate
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "processQualifiedName": "Egeria:DailyGovernanceActionProcess"
}

###
# Full request body for initiate governance action process
# {
#   "class" : "InitiateGovernanceActionProcessRequestBody",
#   "processQualifiedName": "",
#   "requestParameters": {
#       "parameterName1" : "parameterValue1",
#       "parameterName2" : "parameterValue2"
#   },
#   "requestSourceGUIDs": [ "" ],
#   "actionTargets": [
#     {
#       "class" : "NewActionTarget",
#       "actionTargetName" : "",
#       "actionTargetGUID" : ""
#     } ],
#   "startDate": "",
#   "originatorServiceName": "",
#   "originatorEngineName": ""
# }
#
###

@engineActionGUID=ba70c389-3398-4a18-afc7-4711ec63d08d

###
# @name getEngineAction
# Request the status and properties of an engine action request.
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/engine-actions/{{engineActionGUID}}
Authorization: Bearer {{token}}


###
# @name cancelEngineAction
# Request that an engine action request is cancelled and any running governance service is stopped.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/engine-actions/{{engineActionGUID}}/cancel
Authorization: Bearer {{token}}


###
# @name getEngineActions
# Retrieve the engine actions that are known to the server.
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/engine-actions?startFrom=0&pageSize=0
Authorization: Bearer {{token}}


###
# @name getActiveEngineActions
# Retrieve the engine actions that are still in process.
GET {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/engine-actions/active?startFrom=0&pageSize=0
Authorization: Bearer {{token}}


###
# @name findEngineActions
# Retrieve the list of engine action metadata elements that contain the search string.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/engine-actions/by-search-string?
    startFrom=0&pageSize=0&startsWith=false&endsWith=false&ignoreCase=true
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "string" : "add string here"
}


###
# @name getEngineActionsByName
# Retrieve the list of engine action metadata elements with a matching qualified or display name.
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/automated-curation/engine-actions/by-name?
    startFrom=0&pageSize=0
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "string" : "add string here"
}