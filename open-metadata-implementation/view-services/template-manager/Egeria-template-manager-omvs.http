# Egeria-template-manager-view-service

@baseURL=https://localhost:9443
@viewServer=view-server

###
# =====================================================================================================================
# Manage the authentication token.  Run this request to create/refresh the token.

# @name Token (RequestBody)
POST {{baseURL}}/api/token
Content-Type: application/json

{
  "userId" : "peterprofile",
  "password" : "secret"
}

> {% client.global.set("token", response.body); %}


###
# =====================================================================================================================
# Maintain the metadata elements that makes up the template

@metadataElementGUID=add guid here
@classificationName=add name here
@relationshipGUID=add guid here

###
# @name createMetadataElementInStore
# Create a new metadata element in the metadata store.  The type name comes from the open metadata types.
# The selected type also controls the names and types of the properties that are allowed.
# This version of the method allows access to advanced features such as multiple states and
# effectivity dates.
     
POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/metadata-elements
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewOpenMetadataElementRequestBody",
  "externalSourceGUID" : "",
  "externalSourceName" : "",
  "typeName" : "",
  "initialStatus" : "ACTIVE",
  "initialClassifications" : {},
  "anchorGUID" : "",
  "isOwnAnchor" : false,
  "effectiveFrom" : "{{$isoTimestamp}}",
  "effectiveTo": "{{$isoTimestamp}}",
  "properties" : {},
  "parentGUID" : "",
  "parentRelationshipTypeName" : "",
  "parentRelationshipProperties" : {},
  "parentAtEnd1" : true,
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name createMetadataElementFromTemplate
# Create a new metadata element in the metadata store using a template.  The type name comes from the open metadata types.
# The selected type also controls the names and types of the properties that are allowed.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/metadata-elements/from-template
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "TemplateRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "typeName" : "",
  "templateGUID" : "",
  "anchorGUID" : "",
  "isOwnAnchor" : false,
  "effectiveFrom" : "{{$isoTimestamp}}",
  "effectiveTo": "{{$isoTimestamp}}",
  "replacementProperties" : {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "propertyName" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "value of property"
      }
    }
  },
  "placeholderProperties" : {
     "placeholderName1" : "placeholderValue1",
     "placeholderName2" : "placeholderValue2"
  },
  "parentGUID" : "",
  "parentRelationshipTypeName" : "",
  "parentRelationshipProperties" : {},
  "parentAtEnd1" : true,
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name updateMetadataElementInStore
# Update the properties of a specific metadata element.  The properties must match the type definition associated with the
# metadata element when it was created.  However, it is possible to update a few properties, or replace all them by
# the value used in the replaceProperties flag.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/metadata-elements/{{metadataElementGUID}}/update-properties
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdatePropertiesRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}",
  "properties" : {
    "class": "ElementProperties",
    "propertyValueMap" : {
      "description" : {
        "class": "PrimitiveTypePropertyValue",
        "typeName": "string",
        "primitiveValue" : "New description"
      }
    }
  },
  "replaceProperties" : false
}


###
# @name updateMetadataElementStatusInStore
# Update the status of specific metadata element. The new status must match a status value that is defined for the element's type
# assigned when it was created.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/metadata-elements/{{metadataElementGUID}}/update-status
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateStatusRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}",
  "newStatus" : "ACTIVE"
}


###
# @name updateMetadataElementEffectivityInStore
# Update the effectivity dates control the visibility of the element through specific APIs.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/metadata-elements/{{metadataElementGUID}}/update-effectivity
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateEffectivityDatesRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "effectiveFrom" : "{{$isoTimestamp}}",
  "effectiveTo": "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name deleteMetadataElementInStore
# Delete a specific metadata element.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/metadata-elements/{{metadataElementGUID}}/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name archiveMetadataElementInStore
# Archive a specific metadata element.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/metadata-elements/{{metadataElementGUID}}/archive
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "ArchiveRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "archiveProperties" : {
    "archiveDate" : "{{$isoTimestamp}}",
    "archiveProcess" : "",
    "archiveProperties": {
       "propertyName1" : "propertyValue1",
       "propertyName2" : "propertyValue2"
    }
  },
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name classifyMetadataElementInStore
# Add a new classification to the metadata element.  Note that only one classification with the same name can be attached to
# a metadata element.

 POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/metadata-elements/{{metadataElementGUID}}/classifications/{{classificationName}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewClassificationRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name reclassifyMetadataElementInStore
# Update the properties of a classification that is currently attached to a specific metadata element.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/metadata-elements/{{metadataElementGUID}}/classifications/{{classificationName}}/update-properties
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdatePropertiesRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name updateClassificationEffectivityInStore
# Update the effectivity dates of a specific classification attached to a metadata element.
# The effectivity dates control the visibility of the classification through specific APIs.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/metadata-elements/{{metadataElementGUID}}/classifications/{{classificationName}}/update-effectivity
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateEffectivityDatesRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "effectiveFrom" : "{{$isoTimestamp}}",
  "effectiveTo": "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name declassifyMetadataElementInStore
# Remove the named classification from a specific metadata element.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/metadata-elements/{{metadataElementGUID}}/classifications/{{classificationName}}/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name createRelatedElementsInStore
# Create a relationship between two metadata elements.  It is important to put the right element at each end of the relationship
# according to the type definition since this will affect how the relationship is interpreted.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/related-elements
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "NewRelatedElementsRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name updateRelatedElementsInStore
# Update the properties associated with a relationship.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/related-elements/{{relationshipGUID}}/update-properties
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdatePropertiesRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name updateRelatedElementsEffectivityInStore
# Update the effectivity dates of a specific relationship between metadata elements.
# The effectivity dates control the visibility of the classification through specific APIs.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/related-elements/{{relationshipGUID}}/update-effectivity
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateEffectivityDatesRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "effectiveFrom" : "{{$isoTimestamp}}",
  "effectiveTo": "{{$isoTimestamp}}",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}"
}


###
# @name deleteRelatedElementsInStore
# Delete a relationship between two metadata elements.

POST {{baseURL}}/servers/{{viewServer}}/api/open-metadata/template-manager/related-elements/{{relationshipGUID}}/delete
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "class" : "UpdateRequestBody",
  "externalSourceGUID" :  "",
  "externalSourceName" : "",
  "forLineage" : false,
  "forDuplicateProcessing" : false,
  "effectiveTime" : "{{$isoTimestamp}}"
}

