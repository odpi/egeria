/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */

plugins {
    id 'org.springframework.boot'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'jakarta.servlet:jakarta.servlet-api'

    // An attempt to load  the right level of lucene in all environments
    runtimeOnly("org.apache.lucene:lucene-core")
    implementation("org.apache.lucene:lucene-queryparser")

    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework:spring-beans'
    implementation 'org.springframework:spring-core'
    implementation 'org.springframework:spring-context'
    compileOnly project(':open-metadata-implementation:frameworks:open-metadata-framework')
    implementation project(':open-metadata-implementation:frameworks:open-connector-framework')
    implementation project(':open-metadata-implementation:server-operations:server-operations-api')
    implementation project(':open-metadata-implementation:server-operations:server-operations-server')
    runtimeOnly project(':open-metadata-implementation:server-operations:server-operations-spring')
    implementation project(':open-metadata-implementation:admin-services:admin-services-api')
    implementation project(':open-metadata-implementation:admin-services:admin-services-server')
    implementation project(':open-metadata-implementation:common-services:metadata-security:metadata-security-server')
    compileOnly project(':open-metadata-implementation:common-services:ffdc-services')
    runtimeOnly 'ch.qos.logback:logback-classic'
    implementation project(':open-metadata-implementation:adapters:authentication-plugins:http-helper')
    compileOnly project(':open-metadata-implementation:user-security:token-manager')
    implementation 'org.slf4j:slf4j-api'
    compileOnly 'com.fasterxml.jackson.core:jackson-annotations'
    compileOnly 'com.fasterxml.jackson.core:jackson-databind'
    compileOnly 'com.fasterxml.jackson.core:jackson-core'
    runtimeOnly 'org.hibernate:hibernate-validator'
    runtimeOnly project(':open-metadata-implementation:user-security:user-authn')
    runtimeOnly project(':open-metadata-implementation:platform-services:platform-services-spring')
    runtimeOnly project(':open-metadata-implementation:admin-services:admin-services-spring')
    runtimeOnly 'org.springdoc:springdoc-openapi-starter-webmvc-ui'
    compileOnly 'io.swagger.core.v3:swagger-annotations-jakarta'

    // The following are only included at runtime for the full platform (ie adminChassisOnly is not set as a property)
    if (!project.hasProperty("adminChassisOnly")) {
        runtimeOnly project(':open-metadata-implementation:view-services:action-author:action-author-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:asset-catalog:asset-catalog-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:automated-curation:automated-curation-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:collection-manager:collection-manager-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:classification-manager:classification-manager-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:data-designer:data-designer-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:data-discovery:data-discovery-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:devops-pipeline:devops-pipeline-spring')
        runtimeOnly project(':open-metadata-implementation:view-server-generic-services:metadata-explorer:metadata-explorer-spring')
        runtimeOnly project(':open-metadata-implementation:view-server-generic-services:feedback-manager:feedback-manager-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:glossary-browser:glossary-browser-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:glossary-manager:glossary-manager-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:governance-officer:governance-officer-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:data-officer:data-officer-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:security-officer:security-officer-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:privacy-officer:privacy-officer-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:people-organizer:people-organizer-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:notification-manager:notification-manager-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:project-manager:project-manager-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:my-profile:my-profile-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:reference-data:reference-data-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:runtime-manager:runtime-manager-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:template-manager:template-manager-spring')
        runtimeOnly project(':open-metadata-implementation:view-services:valid-metadata:valid-metadata-spring')

        runtimeOnly project(':open-metadata-implementation:access-services:security-manager:security-manager-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:data-manager:data-manager-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:governance-program:governance-program-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:governance-engine:governance-engine-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:governance-server:governance-server-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:stewardship-action:stewardship-action-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:community-profile:community-profile-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:design-model:design-model-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:it-infrastructure:it-infrastructure-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:project-management:project-management-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:software-developer:software-developer-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:digital-architecture:digital-architecture-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:digital-service:digital-service-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:data-science:data-science-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:asset-consumer:asset-consumer-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:asset-manager:asset-manager-spring')
        runtimeOnly project(':open-metadata-implementation:access-services:asset-owner:asset-owner-spring')
        runtimeOnly project(':open-metadata-implementation:engine-services:survey-action:survey-action-spring')
        runtimeOnly project(':open-metadata-implementation:engine-services:repository-governance:repository-governance-spring')
        runtimeOnly project(':open-metadata-implementation:engine-services:governance-action:governance-action-spring')
        runtimeOnly project(':open-metadata-implementation:integration-services:security-integrator:security-integrator-spring')
        runtimeOnly project(':open-metadata-implementation:integration-services:organization-integrator:organization-integrator-spring')
        runtimeOnly project(':open-metadata-implementation:integration-services:infrastructure-integrator:infrastructure-integrator-spring')
        runtimeOnly project(':open-metadata-implementation:integration-services:lineage-integrator:lineage-integrator-spring')
        runtimeOnly project(':open-metadata-implementation:integration-services:files-integrator:files-integrator-spring')
        runtimeOnly project(':open-metadata-implementation:integration-services:display-integrator:display-integrator-spring')
        runtimeOnly project(':open-metadata-implementation:integration-services:database-integrator:database-integrator-spring')
        runtimeOnly project(':open-metadata-implementation:integration-services:analytics-integrator:analytics-integrator-spring')
        runtimeOnly project(':open-metadata-implementation:integration-services:api-integrator:api-integrator-spring')
        runtimeOnly project(':open-metadata-implementation:integration-services:catalog-integrator:catalog-integrator-spring')
        runtimeOnly project(':open-metadata-implementation:integration-services:topic-integrator:topic-integrator-spring')
        runtimeOnly project(':open-metadata-implementation:repository-services:repository-services-spring')
        runtimeOnly project(':open-metadata-conformance-suite:open-metadata-conformance-suite-spring')
        runtimeOnly project(':open-metadata-implementation:framework-services:ocf-metadata-management:ocf-metadata-spring')
        runtimeOnly project(':open-metadata-implementation:framework-services:gaf-metadata-management:gaf-metadata-spring')
        runtimeOnly project(':open-metadata-implementation:framework-services:oif-metadata-management:oif-metadata-spring')
        runtimeOnly project(':open-metadata-implementation:governance-server-services:integration-daemon-services:integration-daemon-services-spring')
        runtimeOnly project(':open-metadata-implementation:governance-server-services:engine-host-services:engine-host-services-spring')
    }
}

description = 'OMAG Server Platform Chassis for Spring'

bootJar {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
}

springBoot {
    buildInfo()
}

java {
    withJavadocJar()
}

test {
    useJUnitPlatform()
}

// See https://stackoverflow.com/questions/61197984/bootjar-mavenjar-artifact-wasnt-produced-by-this-build
// Ensure the SpringBoot jar is included -- we leave the 'plain' jar in-situ too, for composing alternate chassis
configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifact(bootJar)
    }
}

// Assuming the plugin has been applied
loggingCapabilities {
    // Configuration goes here
    enforceLogback()
}
