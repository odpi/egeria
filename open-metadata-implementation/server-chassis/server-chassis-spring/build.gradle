/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */

plugins {
    id 'org.springframework.boot'
    id "io.freefair.lombok"
}


dependencies {

    implementation 'org.springframework:spring-core'
    implementation 'org.springframework:spring-beans'
    implementation 'org.springframework:spring-context'
    implementation 'org.springframework:spring-web'
    implementation 'org.springframework.boot:spring-boot'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.slf4j:slf4j-api'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'jakarta.servlet:jakarta.servlet-api'
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'org.projectlombok:lombok'
    implementation 'org.yaml:snakeyaml'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'ch.qos.logback:logback-classic'
    runtimeOnly 'org.hibernate:hibernate-validator'
    compileOnly 'io.swagger.core.v3:swagger-annotations-jakarta'

    compileOnly project(':open-metadata-implementation:common-services:ffdc-services')
    implementation project(':open-metadata-implementation:frameworks:open-connector-framework')
    implementation project(':open-metadata-implementation:adapters:authentication-plugins:http-helper')
    implementation project(':open-metadata-implementation:admin-services:admin-services-api')
    implementation project(':open-metadata-implementation:server-operations:server-operations-api')
    implementation project(':open-metadata-implementation:server-operations:server-operations-server')

    implementation project(path: ':open-metadata-implementation:adapters:open-connectors:connector-configuration-factory')
    implementation project(path: ':open-metadata-implementation:repository-services:repository-services-implementation')

    /* IN DEVELOPMENT */

    /* Pulling dependencies for some fo the sub-systems enabling 'Metadata Access Store' services  */

    runtimeOnly project(':open-metadata-implementation:repository-services:repository-services-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:asset-manager:asset-manager-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:asset-catalog:asset-catalog-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:data-manager:data-manager-spring')

    /* Pulling dependencies for some fo the sub-systems enabling 'Integration Daemon' services to test Database Integrator via JDBC integration connector */

//    runtimeOnly project(':open-metadata-implementation:integration-services:database-integrator:database-integrator-server')
//    runtimeOnly 'org.odpi.egeria:egeria-connector-resource-jdbc:1.1'
//    runtimeOnly 'org.odpi.egeria:egeria-connector-integration-jdbc:1.1'
//    runtimeOnly 'com.oracle.database.jdbc:ojdbc10:19.19.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.springframework.boot:spring-boot-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.vaadin.external.google:android-json:0.0.20131108.vaadin1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.springframework:spring-test'

}

description = 'OMAG Server Chassis for Spring'

bootJar {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
}

java {
    withJavadocJar()
}

test {
    useJUnitPlatform()
}

// See https://stackoverflow.com/questions/61197984/bootjar-mavenjar-artifact-wasnt-produced-by-this-build
// Ensure the SpringBoot jar is included -- we leave the 'plain' jar in-situ too, for composing alternate chassis
configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifact(bootJar)
    }
}

// Assuming the plugin has been applied
loggingCapabilities {
    // Configuration goes here
    enforceLogback()
}
