/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin")
    }
}

plugins {
    id 'org.springframework.boot'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core'
    //implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    //implementation 'javax.servlet:javax.servlet-api'
    // Explicitly needed for gradle - added by maven plugin

    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework:spring-beans'
    implementation 'org.springframework:spring-core'
    implementation 'org.springframework:spring-context'
    implementation project(':open-metadata-implementation:admin-services:admin-services-server')
    compileOnly project(':open-metadata-implementation:common-services:ffdc-services')
    implementation project(':open-metadata-implementation:admin-services:admin-services-api')
    runtimeOnly 'ch.qos.logback:logback-classic'
    implementation project(':open-metadata-implementation:adapters:authentication-plugins:http-helper')
    implementation 'org.slf4j:slf4j-api'
    runtimeOnly 'org.springdoc:springdoc-openapi-ui'
    implementation 'io.swagger.core.v3:swagger-annotations'
    runtimeOnly 'org.hibernate:hibernate-validator'
    runtimeOnly project(':open-metadata-implementation:platform-services:platform-services-spring')
    runtimeOnly project(':open-metadata-implementation:admin-services:admin-services-spring')
    runtimeOnly project(':open-metadata-implementation:common-services:ocf-metadata-management:ocf-metadata-spring')
    runtimeOnly project(':open-metadata-implementation:repository-services:repository-services-spring')
    runtimeOnly project(':open-metadata-conformance-suite:open-metadata-conformance-suite-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:asset-consumer:asset-consumer-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:asset-manager:asset-manager-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:asset-owner:asset-owner-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:discovery-engine:discovery-engine-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:stewardship-action:stewardship-action-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:community-profile:community-profile-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:design-model:design-model-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:data-privacy:data-privacy-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:it-infrastructure:it-infrastructure-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:project-management:project-management-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:dev-ops:dev-ops-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:software-developer:software-developer-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:digital-architecture:digital-architecture-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:digital-service:digital-service-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:data-science:data-science-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:governance-engine:governance-engine-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:governance-program:governance-program-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:asset-catalog:asset-catalog-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:analytics-modeling:analytics-modeling-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:subject-area:subject-area-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:data-engine:data-engine-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:glossary-view:glossary-view-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:asset-lineage:asset-lineage-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:data-manager:data-manager-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:security-officer:security-officer-spring')
    runtimeOnly project(':open-metadata-implementation:access-services:security-manager:security-manager-spring')
    runtimeOnly project(':open-metadata-implementation:governance-servers:open-lineage-services:open-lineage-services-spring')
    runtimeOnly project(':open-metadata-implementation:governance-servers:data-engine-proxy-services:data-engine-proxy-services-spring')
    runtimeOnly project(':open-metadata-implementation:governance-servers:integration-daemon-services:integration-daemon-services-spring')
    runtimeOnly project(':open-metadata-implementation:governance-servers:engine-host-services:engine-host-services-spring')
    runtimeOnly project(':open-metadata-implementation:engine-services:asset-analysis:asset-analysis-spring')
    runtimeOnly project(':open-metadata-implementation:engine-services:repository-governance:repository-governance-spring')
    runtimeOnly project(':open-metadata-implementation:engine-services:governance-action:governance-action-spring')
    runtimeOnly project(':open-metadata-implementation:integration-services:analytics-integrator:analytics-integrator-spring')
    runtimeOnly project(':open-metadata-implementation:integration-services:api-integrator:api-integrator-spring')
    runtimeOnly project(':open-metadata-implementation:integration-services:catalog-integrator:catalog-integrator-spring')
    runtimeOnly project(':open-metadata-implementation:integration-services:database-integrator:database-integrator-spring')
    runtimeOnly project(':open-metadata-implementation:integration-services:display-integrator:display-integrator-spring')
    runtimeOnly project(':open-metadata-implementation:integration-services:files-integrator:files-integrator-spring')
    runtimeOnly project(':open-metadata-implementation:integration-services:infrastructure-integrator:infrastructure-integrator-spring')
    runtimeOnly project(':open-metadata-implementation:integration-services:lineage-integrator:lineage-integrator-spring')
    runtimeOnly project(':open-metadata-implementation:integration-services:organization-integrator:organization-integrator-spring')
    runtimeOnly project(':open-metadata-implementation:integration-services:search-integrator:search-integrator-spring')
    runtimeOnly project(':open-metadata-implementation:integration-services:security-integrator:security-integrator-spring')
    runtimeOnly project(':open-metadata-implementation:integration-services:topic-integrator:topic-integrator-spring')
    runtimeOnly project(':open-metadata-implementation:view-services:glossary-author-view:glossary-author-view-spring')
    runtimeOnly project(':open-metadata-implementation:view-services:rex-view:rex-view-spring')
    runtimeOnly project(':open-metadata-implementation:view-services:tex-view:tex-view-spring')
    runtimeOnly project(':open-metadata-implementation:view-services:dino-view:dino-view-spring')
    runtimeOnly project(':open-metadata-implementation:view-services:server-author-view:server-author-view-spring')
}

description = 'OMAG Server Platform Chassis for Spring'

bootJar {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
}

java {
    withJavadocJar()
}

test {
	useJUnitPlatform()
}


